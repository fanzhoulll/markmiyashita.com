<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mark Miyashita</title>
    <link href="http://markmiyashita.com/atom.xml" rel="self"/>
    <link href="http://markmiyashita.com"/>
    <updated>2013-08-23T20:40:52-07:00</updated>
    <id>http://markmiyashita.com/</id>
    
    
    <entry>
        <title><![CDATA[One Stack, One Queue]]></title>
        
        <category term="interviews" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//interviews/problems/one_stack_one_queue"/>
        <updated>2013-08-06T00:00:00-07:00</updated>
        <id>markmiyashita.com:/interviews/problems/one_stack_one_queue</id>
        <content type="html"><![CDATA[
<h2 id="one-stack-one-queue">One Stack, One Queue</h2>

<p>Stacks and Queues are popular abstract data structures that represent fundamental ideas in programming and more specifically data structures. One popular interview question is to mimic the functionality of a queue using two stacks. This question takes that a step further by requiring the queue to be made out of a single stack. Recall what fundamental idea stacks are related to and this question will be a breeze.</p>

<p>Write your solution in any language you like. We have solutions below for the
following languages:</p>

<p><a href="#python">Python</a></p>

<h3 id="python">Python Solution <a href="/interviews/problems/one_stack_one_queue/one_stack_one_queue_python.py">(download)</a></h3>

<div class="highlight"><pre><code class="python"><span class="c"># One Stack, One Queue - Python Solution</span>
<span class="c"># By: Mark Miyashita</span>

<span class="k">class</span> <span class="nc">Queue</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Build a queue using only one stack.&quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Adds an item to the queue.</span>

<span class="sd">        &gt;&gt;&gt; q = Queue()</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        []</span>
<span class="sd">        &gt;&gt;&gt; q.enqueue(1)</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        [1]</span>
<span class="sd">        &gt;&gt;&gt; q.enqueue(4)</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        [1, 4]</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Removes the first item in the queue.</span>

<span class="sd">        &gt;&gt;&gt; q = Queue()</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        []</span>
<span class="sd">        &gt;&gt;&gt; q.enqueue(14)</span>
<span class="sd">        &gt;&gt;&gt; q.enqueue(123)</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        [14, 123]</span>
<span class="sd">        &gt;&gt;&gt; q.dequeue()</span>
<span class="sd">        14</span>
<span class="sd">        &gt;&gt;&gt; q</span>
<span class="sd">        [123]</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">temp</span>
        <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">dequeue</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">item</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</code></pre></div>

]]></content>
        <author>
            <name></name>
            <url></url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Merge Sort]]></title>
        
        <category term="interviews" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//interviews/problems/merge_sort"/>
        <updated>2013-06-02T00:00:00-07:00</updated>
        <id>markmiyashita.com:/interviews/problems/merge_sort</id>
        <content type="html"><![CDATA[
<h2 id="merge-sort">Merge Sort</h2>

<p>Merge sort is a popular conquer and divide sorting algorithm. If you haven’t
heard of it before, you should check out the Wikipedia page
<a href="http://en.wikipedia.org/wiki/Merge_sort">here</a>. It has a nice visualization of
the algorithm in action.</p>

<p>A basic outline of the algorithm is as follows:</p>

<ol>
  <li>Divide the input list into two sublists until you have <code>n</code> lists of one item
each.</li>
  <li>Repeatedly merge the two sublists together until you obtain the sorted list.</li>
</ol>

<p>Write your solution in any language you like. We have solutions below for the
following languages:</p>

<p><a href="#python">Python</a></p>

<p><a href="#ruby">Ruby</a></p>

<h3 id="python">Python Solution <a href="/interviews/problems/merge_sort/merge_sort_python.py">(download)</a></h3>

<div class="highlight"><pre><code class="python"><span class="c"># Merge Sort Python Solution</span>
<span class="c"># By: Mark Miyashita</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Sorts the input list using the merge sort algorithm.</span>

<span class="sd">    &gt;&gt;&gt; lst = [4, 5, 1, 6, 3]</span>
<span class="sd">    &gt;&gt;&gt; merge_sort(lst)</span>
<span class="sd">    [1, 3, 4, 5, 6]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">lst</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">[:</span><span class="n">mid</span><span class="p">])</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">:])</span>
    <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Takes two sorted lists and returns a single sorted list by comparing the</span>
<span class="sd">    elements one at a time.</span>

<span class="sd">    &gt;&gt;&gt; left = [1, 5, 6]</span>
<span class="sd">    &gt;&gt;&gt; right = [2, 3, 4]</span>
<span class="sd">    &gt;&gt;&gt; merge(left, right)</span>
<span class="sd">    [1, 2, 3, 4, 5, 6]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">left</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">right</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">right</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">left</span>
    <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">right</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</code></pre></div>

<h3 id="ruby">Ruby Solution <a href="/interviews/problems/merge_sort/merge_sort_ruby.rb">(download)</a></h3>

<div class="highlight"><pre><code class="ruby"><span class="c1"># !/usr/bin/env ruby</span>
<span class="c1"># Merge Sort Ruby Solution</span>
<span class="c1"># By: Mark Miyashita</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">lst</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">1</span>
    <span class="n">lst</span>
  <span class="k">else</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lst</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="o">[</span><span class="n">mid</span><span class="o">.</span><span class="n">.lst</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">)</span>
    <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">left</span><span class="o">.</span><span class="n">empty?</span>
    <span class="n">right</span>
  <span class="k">elsif</span> <span class="n">right</span><span class="o">.</span><span class="n">empty?</span>
    <span class="n">left</span>
  <span class="k">elsif</span> <span class="n">left</span><span class="o">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">.</span><span class="n">first</span>
    <span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.left</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="o">[</span><span class="n">right</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.right</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>

]]></content>
        <author>
            <name></name>
            <url></url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Install Heroku and Deploy Your App]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/install_heroku_and_deploy_your_app"/>
        <updated>2013-04-13T01:39:00-07:00</updated>
        <id>markmiyashita.com:/blog/install_heroku_and_deploy_your_app</id>
        <content type="html"><![CDATA[<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#installation">Installation</a></li>
  <li><a href="#deploying-your-app">Deploying Your App</a>
    <ul>
      <li><a href="#ruby-on-rails">Ruby on Rails</a></li>
      <li><a href="#nodejs">Node.js</a></li>
      <li><a href="#django">Django</a></li>
    </ul>
  </li>
</ul>

<h2 id="introduction">Introduction</h2>

<!--start-->
<p>So, you’ve finished adding the final touches to your app and now you want to put in on the Internet for everyone else to use. How do I do that?!</p>

<p>Well, there are several options available to you at this point, most of them are free. The most popular free option is to use Heroku and I’m going to be walking through the steps to set up Heroku on your computer and deploy your first app.
<!--end--></p>

<p>First, let’s talk a little about what Heroku is. Heroku is a cloud application platform. In one sentence, Heroku allows you to serve your web applications using their servers and allows other computers to access your site at the specified url. Heroku has mastered the art of simplicity, and setting up an app and deploying has never been easier. Let’s dive into the steps necessary to do this.</p>

<p>Since Heroku is a service, we’re first going to have to sign up for an account. You can do that <a href="https://id.heroku.com/signup/devcenter">here</a>.</p>

<h2 id="installation">Installation</h2>

<ul>
  <li>First, we need to download the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>.</li>
</ul>

<p>The Heroku Toolbelt install a bunch of command line tools that allow you to easily create and edit apps straight from your own computer. It mainly gives us access to the <code>heroku</code> command that allows us to do a lot of different heroku-specific commands. </p>

<ul>
  <li>Next, let’s log in to our Heroku accounts using the command line. Run the following command:</li>
</ul>

<!-- code block below -->

<pre><code>$ heroku login
Enter your Heroku credentials.
Email: example@example.com
Password: 
Could not find an existing public key.
Would you like to generate one? [Yn] 
Generating new SSH public key.
Uploading ssh public key /Users/mark/.ssh/id_rsa.pub
</code></pre>

<p>If prompted to generate a public key, go ahead and enter “Y” and proceed to do so.</p>

<p>That’s it for installation! Now we just need to figure out how to deploy our apps using the new command line interface that we just installed. Go on to the next section if you’re ready.</p>

<h2 id="deploying-your-app">Deploying Your App</h2>

<p>Heroku can deploy a bunch of apps and you can find different tutorials listed on their website <a href="https://devcenter.heroku.com/articles/quickstart#step-4-deploy-an-application">here</a>. I’m going to outline the three most popular: Ruby on Rails, Node.js, and Django.</p>

<h2 id="ruby-on-rails">Ruby on Rails</h2>

<p>If you already have an existing Rails app, you don’t need to complete this first step.</p>

<p>Create a new app:</p>

<pre><code>rails my_new_app
cd my_new_app
</code></pre>

<p>Heroku uses a PostgreSQL database so we’re going to have to edit our <code>Gemfile</code> to reflect that. Change this line:</p>

<pre><code>gem 'sqlite3'
</code></pre>

<p>To this:</p>

<pre><code>gem 'pg'
</code></pre>

<p>Make sure everything works locally by running:</p>

<pre><code>bundle install
</code></pre>

<p>If you aren’t using Git already, you definitely should be. Git allows you to quickly keep track of changes and to work easily and collaboratively with others. Let’s initialize our app to use git.</p>

<pre><code>git init
git add .
git commit -m "initial commit"
</code></pre>

<p>Now let’s deploy our app to Heroku. First, let’s create a new app using the Heroku Toolbelt that we installed earlier. The argument below, “my-app-name”, is the name that we are giving our app. Feel free to choose anything here, it will eventually become the url for your app.</p>

<pre><code>$ heroku create my-app-name
Creating my-app-name... done, stack is cedar
http://my-app-name.herokuapp.com/ | git@heroku.com:my-app-name.git
Git remote heroku added
</code></pre>

<p>What the command did was create a new app with a name that you specified. If we want to give our app a random name, we can run the command: <code>heroku create</code> without an optional name and heroku will create a name for us. Let’s push our code to heroku and deploy app.</p>

<pre><code>$ git push heroku master
Counting objects: 67, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (52/52), done.
Writing objects: 100% (67/67), 86.33 KiB, done.
Total 67 (delta 5), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Rails app detected
-----&gt; Installing dependencies using Bundler version 1.1
       Checking for unresolved dependencies.
       Unresolved dependencies detected.
       Running: bundle install --without development:test --path vendor/bundle --deployment
       Fetching source index for http://rubygems.org/
       Installing rake (0.8.7)
       ...
       Installing rails (3.0.5)
       Your bundle is complete! It was installed into ./vendor/bundle
-----&gt; Rails plugin injection
       Injecting rails_log_stdout
       Injecting rails3_serve_static_assets
-----&gt; Discovering process types
       Procfile declares types -&gt; (none)
       Default types for Rails -&gt; console, rake, web, worker
-----&gt; Compiled slug size is 8.3MB
-----&gt; Launching... done, v5
       http://my-app-name.herokuapp.com deployed to Heroku

To git@heroku.com:my-app-name.git
 * [new branch]      master -&gt; master
</code></pre>

<p>Now that our app has been pushed to Heroku, we need to initialize our database. Then we can now open our app!</p>

<pre><code>heroku run rake db:reset
heroku open
</code></pre>

<p>Now, whenever we want to push updates to our app, we run the following sequence.</p>

<pre><code>git add .
git commit -m "updates for this commit"
git push heroku master
</code></pre>

<p>And our app will be updated and the changes can be seen immediately at our url.</p>

<h2 id="nodejs">Node.js</h2>

<p>If you already have an existing Node app, you don’t have to complete this first step.</p>

<p>Create a new folder and make a new file and add the following contents:</p>

<pre><code>mkdir node_app
cd node_app
touch web.js
</code></pre>

<p>We’re going to create a simple web server that uses Express and displays “Hello World!”</p>

<h4 id="webjs">web.js</h4>

<pre><code>var express = require("express");
var app = express();
app.use(express.logger());

app.get('/', function(request, response) {
  response.send('Hello World!');
});

var port = process.env.PORT || 5000;
app.listen(port, function() {
  console.log("Listening on " + port);
});
</code></pre>

<p>Now let’s create another file <code>package.json</code> that will contain information about the dependencies of our app.</p>

<h4 id="packagejson">package.json</h4>
<pre><code>{
  "name": "node-example",
  "version": "0.0.1",
  "dependencies": {
    "express": "3.1.x"
  },
  "engines": {
    "node": "0.10.x",
    "npm": "1.2.x"
  }
}
</code></pre>

<p>Now use the command <code>npm</code> to install our dependencies.</p>

<pre><code>npm install
</code></pre>

<p>Lastly, we’re going to make a <code>Procfile</code> that is going to declare what processes we want to run once we deploy.</p>

<pre><code>web: node web.js
</code></pre>

<p>You can now start your app using Foreman with the following command.</p>

<pre><code>foreman start
</code></pre>

<p>If you aren’t using Git already, you definitely should be. Git allows you to quickly keep track of changes and to work easily and collaboratively with others. Let’s initialize our app to use git.</p>

<pre><code>git init
git add .
git commit -m "initial commit"
</code></pre>

<p>Now let’s deploy our app to Heroku. First, let’s create a new app using the Heroku Toolbelt that we installed earlier. The argument below, “my-app-name”, is the name that we are giving our app. Feel free to choose anything here, it will eventually become the url for your app.</p>

<pre><code>$ heroku create my-app-name
Creating my-app-name... done, stack is cedar
http://my-app-name.herokuapp.com/ | git@heroku.com:my-app-name.git
Git remote heroku added
</code></pre>

<p>What the command did was create a new app with a name that you specified. If we want to give our app a random name, we can run the command: <code>heroku create</code> without an optional name and heroku will create a name for us. Let’s push our code to heroku and deploy app.</p>

<pre><code>$ git push heroku master
Counting objects: 343, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (224/224), done.
Writing objects: 100% (250/250), 238.01 KiB, done.
Total 250 (delta 63), reused 0 (delta 0)

-----&gt; Node.js app detected
-----&gt; Resolving engine versions
       Using Node.js version: 0.10.3
       Using npm version: 1.2.18
-----&gt; Fetching Node.js binaries
-----&gt; Vendoring node into slug
-----&gt; Installing dependencies with npm
       ....
       Dependencies installed
-----&gt; Building runtime environment
-----&gt; Discovering process types
       Procfile declares types -&gt; web

-----&gt; Compiled slug size: 4.1MB
-----&gt; Launching... done, v9
       http://my-app-name.herokuapp.com deployed to Heroku

To git@heroku.com:my-app-name.git
 * [new branch]      master -&gt; master
</code></pre>

<p>Once we have finished deploying our app, we can access it by entering in the following command.</p>

<pre><code>heroku open
</code></pre>

<h2 id="django">Django</h2>

<p>Django instructions are a little more complex and I believe that the Heroku instructions can explain it better than I can. For now, view the instructions <a href="https://devcenter.heroku.com/articles/django">here</a>. I will update this post in the future.</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Python *args and **kwargs]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/python-args-and-kwargs"/>
        <updated>2013-03-14T15:38:00-07:00</updated>
        <id>markmiyashita.com:/blog/python-args-and-kwargs</id>
        <content type="html"><![CDATA[<!--start-->
<p>In Python, there are two special symbols that you can use when defining functions to allow them to take in a variable number of arguments. The syntax is to use the symbol <code>*</code> to take in a variable number of arguments; by convention, it is often used with the word <code>args</code>. What <code>*args</code> allows you to do is take in more arguments than the normal of formal arguments that you previously defined. With <code>*args</code>, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments). Here’s an example which should make this clear:
<!--end--></p>

<pre><code>def func_with_two(one, two):
    """
    This function only takes in two arguments because we explicitly
    defined two formal parameters. Any more or any less will cause an
    error.
    """

def func_with_start_args(*args):
    """
    This function can take in any number of arguments, including zero!
    """

def func_with_both(one, two, *args):
    """
    This function requires &lt;i&gt;at least&lt;/i&gt; two arguments. The *args at the end
    says that it can take just two arguments or any number of arguments as long
    as there are at least two.
    """
</code></pre>

<p>What can this be used for? Plenty of things. Say we wanted to make a multiply function that took in a any number of arguments and was able to multiply them all together. We could do this using *args. Here’s another example:</p>

<pre><code>from operator import mul
from functools import reduce

def multiply(*args):
    return reduce(mul, args)

&gt;&gt;&gt; multiply(3, 5, 1, 5)
75
</code></pre>

<p>Using the <code>*</code>, the variable that we associate with the <code>*</code> becomes an iterable meaning you can do things like iterate over it, run some higher order functions such as <code>map</code> and <code>filter</code>, etc.</p>

<p>One last thing, you can also use the <code>*</code> syntax to break up an iterable into it’s individual elements. Here’s an example:</p>

<pre><code>def print_three(a, b, c):
    print(a, b, c)

&gt;&gt;&gt; r = [1, 2, 3]
&gt;&gt;&gt; print_three(*r)   # notice that the list gets broken up into three arguments
1 2 3
</code></pre>

<p>So, what does the <code>**</code> stand for then? For starters, by convention, we use the name <code>kwargs</code> with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them too!). A keyword argument is where you provide a name to the variable as you pass it into the function. Here’s an exmaple which should make it more clear:</p>

<pre><code>def print_table(**kwargs):
    for key, value in kwargs.items():
        print(key, value)

&gt;&gt;&gt; print_table(a = 5, b = 6, c = 7)
b 6
c 7
a 5
</code></pre>

<p>Whoa, what just happened? Notice the syntax, within <code>print_table(a = 5, b = 6, c = 7)</code>, <code>a = 5</code>, <code>b = 6</code>, and <code>c = 7</code> are all keyword arguments. You can think of the <code>kwargs</code> as being a dictionary that maps each keyword to the value that you pass alongside it. That is why when we iterate over the <code>kwargs</code> there doesn’t seem to be any order in which they were printed out.</p>

<p>I hope that this short article helped clarify what <code>*args</code> and <code>**kwargs</code> can be used for! Leave any questions or comments in the section below!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[How to Win a Hackathon]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/how-to-win-a-hackathon"/>
        <updated>2012-11-22T12:04:00-08:00</updated>
        <id>markmiyashita.com:/blog/how-to-win-a-hackathon</id>
        <content type="html"><![CDATA[<!--start-->
<p><img src="/assets/images/hackathon.jpg" class="img-border" /></p>

<p>This year I started participating in many hackathons of different lengths, different atmospheres, and different types of applications that won. I am still quite new to the hackathon scene, but I thought I’d share my thoughts on how most winners, won.
<!--end--></p>

<ul>
  <li>Unless you’re a full-stack developer with really, really good frontend skills, you need a designer. The presentation is arguably the most important part and if your product is not visually pleasing, it will be hard to overcome.</li>
  <li>The demo is the most important part. No matter how great your project is, if you can’t show it properly, or you can’t explain the technical aspects of it, you won’t be able to show off your project in a way that will attract the developers.</li>
  <li>Work on something that you are passionate about. Passion helps you work faster and with less distractions, trust me.</li>
  <li>Make an application that does one thing and make sure it does that one thing very, very well. Most projects that win have one purpose. The reason that they are able to win is because their project is complete and it has a direct purpose. Projects that are too ambitious almost always come up short because of missing features.</li>
</ul>

<p>These are just some of the things that I’ve noticed at various hackathons that I have participated in. Have any additional tips? Leave them in the comments below!</p>

<p>Wow! My article was featured on the front page of Hacker News for almost half a day! You can check out the discussion <a href="http://news.ycombinator.com/item?id=4830418">here!</a> Thanks for all the support everyone!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Setting Up Our First App]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/setting_up_our_first_app"/>
        <updated>0000-01-03T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/setting_up_our_first_app</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">3.1</a></li>
</ul>

<h3 id="section">3.1</h3>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Models, Views, and Controllers]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/models_views_and_controllers"/>
        <updated>0000-01-02T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/models_views_and_controllers</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mvc---an-idea">2.1 MVC - An Idea</a>    <ul>
      <li><a href="#models">2.1.1 Models</a></li>
      <li><a href="#views">2.1.2 Views</a></li>
      <li><a href="#controllers">2.1.3 Controllers</a></li>
    </ul>
  </li>
</ul>

<h3 id="mvc---an-idea">2.1 MVC - An Idea</h3>

<p>What is MVC? MVC stands for Model, View, Controller, and it’s the idea that we
want to separate our code into sections that represent different parts of our
application. Popular web applications separate into three main components.
First off, we have our models which represent the brains within our application.</p>

<p>Models are like objects in which they have attributes and methods that work to
edit and recall data stored within the object. Between objects, there can be
correspondances between them such as one-to-one, many-to-one, or, many-to-many
relationships. These can be thought up of as relationships between actual
objects such as a <code>parent</code> having many <code>children</code>.</p>

<p>Views are what show the data to the users of your web application. Once you find
a user and get all of the attributes, you show it to the user using the view.
Views are generally templated using a markup of some sort. We’ll learn all about
this later on.</p>

<p>Controllers are the link between the two. Requests come in and they are
processed by figuring out which method is called in the controller. The
controller then links together and gets whatever data it needs processed from
the model where it is finally gathered and redisplayed in the view for the user
to interact with again.</p>

<h4 id="models">2.1.1 Models</h4>

<h4 id="views">2.1.2 Views</h4>

<h4 id="controllers">2.1.3 Controllers</h4>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Introduction and Purpose]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/introduction_and_purpose"/>
        <updated>0000-01-01T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/introduction_and_purpose</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">1.1 Introduction</a>    <ul>
      <li><a href="#section">1.1.1</a></li>
      <li><a href="#section-1">1.1.2</a></li>
    </ul>
  </li>
  <li><a href="#section-2">1.2</a></li>
</ul>

<h3 id="introduction">1.1 Introduction</h3>

<h4 id="section">1.1.1</h4>

<h4 id="section-1">1.1.2</h4>

<h3 id="section-2">1.2</h3>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
</feed>