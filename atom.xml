<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mark Miyashita</title>
    <link href="http://markmiyashita.com/atom.xml" rel="self"/>
    <link href="http://markmiyashita.com"/>
    <updated>2013-07-07T15:52:22-07:00</updated>
    <id>http://markmiyashita.com/</id>
    
    
    <entry>
        <title><![CDATA[Find Secret (Using Recursion)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/find_secret_using_recursion"/>
        <updated>2013-07-07T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/find_secret_using_recursion</id>
        <content type="html"><![CDATA[<p>This problem is designed to include lists (which you haven’t learned as of yet). To change the problem slightly, instead of returning the list of indices, instead just return True or False depending on whether or not the secret is in the sentence.</p>

<p>We want to see if the letters within out “secret” can be found, in order, in the given sentence. If it is, we will return back a list of indices that we will use as a secret code. If the secret word’s letters cannot be found within the sentence, then we have failed and should return False. Yes, this problem can be done using iteration instead of recursion, but let’s stick to practicing recursion. Hint: You might want to use a helper.</p>

<pre><code>def find_secret(secret, sentence):
    """
    If the individual letters of the secret are in order within the sentence,
    then the function reutrns the list of indices of those letters. If not, it returns False.

    &gt;&gt;&gt; secret = "mark"
    &gt;&gt;&gt; sentence = "hi my name is ridiculously karl."
    &gt;&gt;&gt; find_secret(secret, sentence)
    [3, 7, 14, 27]
    &gt;&gt;&gt; find_secret("hello", sentence)
    False
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def find_secret(secret, sentence):
    """
    If the individual letters of the secret are in order within the sentence,
    then the function reutrns the list of indices of those letters. If not, it returns False.

    &gt;&gt;&gt; secret = "mark"
    &gt;&gt;&gt; sentence = "hi my name is ridiculously karl."
    &gt;&gt;&gt; find_secret(secret, sentence)
    [3, 7, 14, 27]
    &gt;&gt;&gt; find_secret("hello", sentence)
    False
    """
    def helper(secret, sentence, indices, index):
        if len(secret) == 0:
            return indices
        if len(sentence) == 0:
            return False
        if secret[0] == sentence[0]:
            return helper(secret[1:], sentence[1:], indices + [index], index + 1)
        return helper(secret, sentence[1:], indices, index + 1)
    return helper(secret, sentence, [], 0)
</code></pre>

  <p>If we have a secret that is the empty string, then that automatically exists in our sentence so we return the indices that we have accumulated. If the sentence itself is empty and the secret is not empty, then we have failed and must return False.</p>

  <p>In our recursive cases, we have either found the letter or we have not. If we have found the letter, then we reduce our secret and our sentence by cutting off the first letter. We also increase our index by 1 to move to the next position in the sentence and we also add the current index to our list of indices. </p>

  <p>If we did not find the letter, we just pass through the same secret and we reduce our sentence by one character, keep the indices the same because we didn’t find anything and increase our index by 1. The index just helps us keep track of where we are within the sentence. </p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[What Would Python Print?]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/what_would_python_print"/>
        <updated>2013-07-06T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/what_would_python_print</id>
        <content type="html"><![CDATA[
<p>If we were to type these Python statements and expressions into the interpreter, what would they do? These all either evaluate to a value, an error, or another function. These start out fairly easy and get pretty tough by then end. Remember your rules for evaluating lambdas!</p>

<pre><code>&gt;&gt;&gt; x = lambda: 4
&gt;&gt;&gt; y = lambda x: x + 3
&gt;&gt;&gt; z = lambda x: y
&gt;&gt;&gt; z(4)(1)               #1

&gt;&gt;&gt; z(5)(1)               #2

&gt;&gt;&gt; h = lambda f, g: g(f)
&gt;&gt;&gt; h(lambda x: x * 2, lambda x: x)(2)      #3

&gt;&gt;&gt; g = lambda f: f(f)
&gt;&gt;&gt; g(g(lambda x: x))(3)  #4

&gt;&gt;&gt; g(g(lambda x: x))(lambda x: x + 5)(1)   #5

&gt;&gt;&gt; a = lambda b: lambda a: b(a)
&gt;&gt;&gt; b = lambda b: lambda b: b + 1
&gt;&gt;&gt; a(b)                #6

&gt;&gt;&gt; a(b)(1)(2)          #7

&gt;&gt;&gt; b(a)(5)             #8

&gt;&gt;&gt; b(a(b))(7)          #9

&gt;&gt;&gt; c = lambda a, b: (b, a)
&gt;&gt;&gt; b(a(c))(5)          #10

&gt;&gt;&gt; c(a, b)[1](b)(1)(2) #11

&gt;&gt;&gt; c(b(1), b(2))[0](5) #12
</code></pre>

<p>You can break this question up into subquestions. The first part is numbers 1-2, second part is 3-5, third part is 6-12.</p>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <ol>
    <li>4</li>
    <li>4</li>
    <li>4</li>
    <li>3</li>
    <li>6</li>
    <li>function</li>
    <li>3</li>
    <li>6</li>
    <li>8</li>
    <li>6</li>
    <li>3</li>
    <li>6</li>
  </ol>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Tuples Practice]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/tuples_practice"/>
        <updated>2013-07-06T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/tuples_practice</id>
        <content type="html"><![CDATA[
<p>Here are some tuples problems! What would Python output at each of the numbered questions below?</p>

<pre><code>&gt;&gt;&gt; a = (1, 2, 3)
&gt;&gt;&gt; b = (3, 2, a)
&gt;&gt;&gt; a               #1

&gt;&gt;&gt; b               #2

&gt;&gt;&gt; b[0] == a[2]    #3

&gt;&gt;&gt; c = (1, 2, 3)
&gt;&gt;&gt; a == c          #4

&gt;&gt;&gt; a is c          #5

&gt;&gt;&gt; b[2] is c       #6

&gt;&gt;&gt; b[2] is a       #7

&gt;&gt;&gt; b[:2]           #8

&gt;&gt;&gt; c[1:]           #9

&gt;&gt;&gt; d = (a, b, c)
&gt;&gt;&gt; d[1:2]          #10

&gt;&gt;&gt; d[2][2]         #11

&gt;&gt;&gt; d[1][0]         #12
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <ol>
    <li>(1, 2, 3)</li>
    <li>(3, 2, (1, 2, 3))</li>
    <li>True</li>
    <li>True</li>
    <li>False</li>
    <li>False</li>
    <li>True</li>
    <li>(3, 2)</li>
    <li>(2, 3)</li>
    <li>((3, 2, (1, 2, 3)),)</li>
    <li>3</li>
    <li>3</li>
  </ol>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Newton's Method Practice]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/newtons_method_practice"/>
        <updated>2013-07-06T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/newtons_method_practice</id>
        <content type="html"><![CDATA[
<p>Recall the following definitions from Newton’s Method from discussion:</p>

<pre><code>def approx_deriv(fn, x, dx=0.00001):
    return (fn(x+dx)-fn(x))/dx

def newtons_method(fn, guess=1, max_iterations=100):
    ALLOWED_ERROR_MARGIN = 0.0000001
    i = 1
    while abs(fn(guess)) &gt; ALLOWED_ERROR_MARGIN and i &lt;= max_iterations:
        guess = guess - fn(guess) / approx_deriv(fn, guess)
        i += 1
    return guess
</code></pre>

<p>If you don’t understand Newton’s Method at all, be sure to ask your TA during office hours or ask on Piazza.</p>

<p>We want to write a function that will help us find the roots of the following mathematical equation:</p>

<pre><code>f(x) = x^3 + x + 1
</code></pre>

<p>Write a function, <code>f</code> that can find the root(s) of the function above.</p>

<pre><code>def f():
    """Returns at least one root of the equation x^3 + x + 1."""
    "***YOUR CODE HERE***"
</code></pre>

<p>Now, we want to make this function more general. How can we write a new function <code>g</code> that takes in an argument <code>y</code> and finds the roots of:</p>

<pre><code>f(x, y) = x^3 + y + 1
</code></pre>

<p>For any <code>y</code> value.</p>

<pre><code>def g(y):
    """Returns at least one root of the equation x^3 + y + 1.

    &gt;&gt;&gt; round(g(5), 3)
    -1.817
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def f():
    return newtons_method(lambda x: x**3 + x + 1

def g(y):
    return newtons_method(lambda x: x**3 + y + 1
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Longest Length of the Same Character in a String]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/longest_length_same_character"/>
        <updated>2013-07-06T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/longest_length_same_character</id>
        <content type="html"><![CDATA[
<p>Write a function that finds the length of the longest contiguous string of the same character and returns that length. Implement it recursively (you probably don’t want to do it iteratively but you’re free to try!) You may use the functions <code>first</code> and <code>rest</code> defined below.</p>

<h5 id="hint-1-you-might-want-to-use-a-helper-function">Hint #1: You might want to use a helper function…</h5>

<h5 id="hint-2-your-helper-function-might-want-to-include-the-following-information-maybe-more">Hint #2: Your helper function might want to include the following information (maybe more):</h5>

<pre><code>def helper(word, prev_char, curr_count, curr_max):
    "***YOUR CODE HERE***"
</code></pre>

<p>Make sure that your function works on all inputs, including the empty string! Here are the functions <code>first</code> and <code>rest</code> that we have been working with in class.</p>

<pre><code>def first(word):
    return word[0]
    
def rest(word):
    return word[1:]
</code></pre>

<pre><code>def find_longest_run(word):
    """
    Finds the length of the longest contiguous string
    of a single character and returns the length.

    &gt;&gt;&gt; find_longest_run("hello")
    2
    &gt;&gt;&gt; find_longest_run("helloooo")
    4
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def helper(word, prev_char, curr_count, curr_max):
    if len(word) == 0:
        return curr_max
    elif first(word) == prev_char:
        return helper(rest(word), first(word), curr_count + 1, max(curr_count + 1, curr_max))
    return helper(rest(word), first(word), 1, curr_max)

def find_longest_run(word):
    """
    Finds the length of the longest contiguous string
    of a single character and returns the length.
    
    &gt;&gt;&gt; find_longest_run("hello")
    2
    &gt;&gt;&gt; find_longest_run("helloooo")
    4
    """
    return helper(word, "", 0, 0)
</code></pre>

  <p>We need to keep track of some information between each recursive call so to make our lives easier, we will implement a helper function that takes in 4 arguments. We will analyze the rest of the word, we will need to compare against the previous character, and we will need to keep track of how long our current run is as well as our current longest run. Once we have that, we can figure out what our base case(s) are. For one, if the word that we are checking doesn’t have any letters left, then there can’t be any characters left to check so we return the <code>curr_max</code> (longest length) that we have found so far. Then, we have two different situations, whether or not the previous character was eqaul to our current character. If it is, then we just add 1 to our <code>curr_count</code> and then compare to see if that new <code>curr_count</code> is greater than our <code>curr_max</code>. If it is, we take the new value. In our other recursive call, we just recurse on the input, but we also set our <code>curr_count</code> to 1 because the characters were not the same so the streak starts over.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Sum Digits]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/sum_digits"/>
        <updated>2013-07-03T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/sum_digits</id>
        <content type="html"><![CDATA[
<p>Write a function that sums up the digits of a number. Try to implement it both iteratively and recursively.</p>

<pre><code>def sum_digits(n):
    """
    Takes a number n as input and outputs the 
    sum of the digits of n.
    
    &gt;&gt;&gt; sum_digits(100)
    1
    &gt;&gt;&gt; sum_digits(235)
    10
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def sum_digits(n):
    """
    Takes a number n as input and outputs the 
    sum of the digits of n.
    
    &gt;&gt;&gt; sum_digits(100)
    1
    &gt;&gt;&gt; sum_digits(235)
    10
    """
    if n &lt; 10:
        return n
    return n % 10 + sum_digits(n // 10)
</code></pre>

  <p>When we are given a number, n, that is less than 10, we know that the number has only one digit so we can just return that number. When it is greater than or equal to ten, we want to mod it by 10 to get the ones place, and then remove the ones place and use recursion to find the sum of the rest of the digits. The floordiv operator allows us to remove the ones place from the number by floordiving by 10.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Church Numerals]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/notes/church_numerals"/>
        <updated>2013-07-02T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/notes/church_numerals</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-are-church-numerals">What are Church Numerals?</a></li>
  <li><a href="#add-one">Add One</a></li>
  <li><a href="#add">Add</a></li>
</ul>

<h4 id="what-are-church-numerals">What are Church Numerals?</h4>

<p><a href="http://en.wikipedia.org/wiki/Church_encoding#Computation_with_Church_numerals">Church numerals</a> come from <a href="http://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a> and are based upon the idea that you can represent numbers by using a series of nested functions. At the most basic level, we have zero which can be defined as:</p>

<pre><code>def zero(f):
    return lambda x: x
</code></pre>

<p>Or simply, the function for zero does not depend on the input function. It simply returns a function that takes in an argument and returns the same value. Now let’s take a look at one.</p>

<pre><code>def one(f):
    return lambda x: f(x)
</code></pre>

<p>What’s going on here? We note that one is simply the same function as zero except with <code>f</code> applied once. As we look at two, we start to see a pattern:</p>

<pre><code>def two(f):
    return lambda x: f(f(x))
</code></pre>

<p>A church numeral is basically just a funtion that takes in a value which we call <code>x</code>, it then takes the input function, <code>f</code> and applies it to the value <code>x</code>, <code>n</code> times. In this case, <code>n</code> is the number that we are representing.</p>

<h4 id="add-one">Add One</h4>

<p>So this is pretty easy, huh? Let’s take it to another level. Let’s define a function that can add 1 to a church numeral. If I call this function on the church numeral, <code>one</code>, I should get back a function that is similar to the function <code>two</code> that we defined above.</p>

<pre><code>def add_one(n):
    """Returns the church numeral that is one more than the input n."""
    "***YOUR CODE HERE***"
</code></pre>

<p>Here’s what we came up with:</p>

<pre><code>def add_one(n):
    return lambda f: lambda x: f(n(f)(x))
</code></pre>

<p>Why and how does this work? Let’s break it down. First, let’s call this on our church numeral <code>one</code> that we defined earlier.</p>

<pre><code>add_one(one)
</code></pre>

<p>The return value looks something like this:</p>

<pre><code>lambda f: lambda x: f(one(f)(x))
</code></pre>

<p>Which also looks like:</p>

<pre><code>lambda f: lambda x: f((lambda g: lambda y: g(y))(f)(x))
</code></pre>

<p>This may look a little confusing at first, but let’s examine what we did here. I substituted the function <code>one</code> with <code>lambda g: lambda y: g(y)</code>. If you remember the lecture from lambdas, we can call lambdas as soon as we define them and that is exactly what is going on here. We’re calling <code>(lambda g: lambda y: g(y))</code> on <code>f</code> immediately after it’s defined. This means that we can replace every <code>g</code> with <code>f</code>. Basically, we’ve stated that the function call <code>(lambda g: lambda y: g(y))(f)</code> reduces to <code>(lambda y: f(y))</code>. We can do the same thing for the <code>x</code> that is also tacked onto the end of the function call. This time, we see that <code>(lambda y: f(y))(x)</code> reduces to <code>f(x)</code>. So, we finally see that the complex lambda expression that resulted from calling <code>add_one(one)</code> reduces all the way down to the following:</p>

<pre><code>lambda f: lambda x: f(f(x))
</code></pre>

<p>Which, if we look up above, is the same as the function two! Looks like it worked! </p>

<h4 id="add">Add</h4>

<p>We can even make this more general, instead of only adding one to our church numberal, we can extend this to adding two church numerals together. Let’s take a look at how that would work.</p>

<pre><code>def add(m, n):
    """Return the church numeral for m + n where m and n are Church Numerals."""
    "***YOUR CODE HERE***"
</code></pre>

<p>Here’s what we came up with:</p>

<pre><code>def add(m, n):
    return lambda f: lambda x: m(f)(n(f)(x))
</code></pre>

<p>Well what do we see here? We notice that the only difference between this function and the <code>add_one</code> function that we defined above is in this one, we’re calling <code>m(f)</code> wheras in the other one, we simply has <code>f</code>. Say that <code>m</code> is <code>one</code> and <code>n</code> is also <code>one</code>, we can follow the same evaluation rules as before and we see that the exact same result comes out of <code>(n(f)(x))</code>. Now, we have <code>lambda f: lambda x: m(f)f(x)</code>. Let’s reduce the <code>m(f)</code> call, substituting the function <code>one</code> for <code>m</code>, we get:</p>

<pre><code>one(f)

lambda x: f(x)
</code></pre>

<p>Plugging that into the previous simplified <code>f(x)</code>, we see that we end up with the following lambda:</p>

<pre><code>lambda f: lambda x: (lambda y: f(y))(f(x))
</code></pre>

<p>Which reduces down to:</p>

<pre><code>lambda f: lambda x: f(f(x))
</code></pre>

<p>because the <code>y</code> value can be substituted with <code>f(x)</code>. If we look at this, we see that again, we added the two church numerals <code>one</code> and <code>one</code> and got <code>two</code>! Yay, we can do math again! </p>

<p>The same ideas can be applied to multiplication and the power functions. Just remember to reduce your lambda calls as soon as you have all of the parameters to call them. Then you can start simplifying the return statements and getting it down to something you can visualize.</p>

<p>Post any questions or comments in the comments below!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Functions Inside Functions]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/functions_inside_functions"/>
        <updated>2013-06-26T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/functions_inside_functions</id>
        <content type="html"><![CDATA[
<p>Here we have some functions defined below. Run through and figure out what the two calls at the bottom output and then draw the environment diagram.</p>

<pre><code>def f(g, f):
    return g(f)

def foo(g, h):
    return h * g(h)

def h(i):
    return 5

f(h, foo)       #1

f(h, foo(h, 3)) #2
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <ol>
    <li>5</li>
    <li>5</li>
  </ol>

  <p>The important thing to note here is the order of evaluation. Remember that you don’t pay attention to the body of a function until you actually call the function AND that you need to evaluate all of your operands before you can apply your operator.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[What Are Functions]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/problems/what_are_functions"/>
        <updated>2013-06-25T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/problems/what_are_functions</id>
        <content type="html"><![CDATA[
<p>So far, we’ve been experimenting with variables, functions, and some basic Python. Here are some questions to help test your knowledge so far. Don’t worry if these are hard at first, they will get easier throughout the semester!</p>

<p>What would the following output in Python?</p>

<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = 6
&gt;&gt;&gt; a       #1

&gt;&gt;&gt; b       #2

&gt;&gt;&gt; def square(x):
...     print(x * x)
...     return x
...
&gt;&gt;&gt; a = square(a)
            #3 - what is printed here?
&gt;&gt;&gt; a       #4

&gt;&gt;&gt; b = square(square(a))
            #5 - what is printed here?

&gt;&gt;&gt; b       #6
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <ol>
    <li>6</li>
    <li>5</li>
    <li>36 (printed)</li>
    <li>6</li>
    <li>36 (printed)
36 (printed)</li>
    <li>6</li>
  </ol>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Merge Sort]]></title>
        
        <category term="interviews" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//interviews/problems/merge_sort"/>
        <updated>2013-06-02T00:00:00-07:00</updated>
        <id>markmiyashita.com:/interviews/problems/merge_sort</id>
        <content type="html"><![CDATA[
<h2 id="merge-sort">Merge Sort</h2>

<p>Merge sort is a popular conquer and divide sorting algorithm. If you haven’t
heard of it before, you should check out the Wikipedia page
<a href="http://en.wikipedia.org/wiki/Merge_sort">here</a>. It has a nice visualization of
the algorithm in action.</p>

<p>A basic outline of the algorithm is as follows:</p>

<ol>
  <li>Divide the input list into two sublists until you have <code>n</code> lists of one item
each.</li>
  <li>Repeatedly merge the two sublists together until you obtain the sorted list.</li>
</ol>

<p>Write your solution in any language you like. We have solutions below for the
following languages:</p>

<p><span><a href="#python" class="button_link load_solution">Python</a></span><span><a href="#ruby" class="button_link load_solution">Ruby</a></span></p>

<h3 id="python">Python Solution <a href="/interviews/problems/merge_sort/merge_sort_python.py">(download)</a></h3>

<div class="highlight"><pre><code class="python"><span class="c"># Merge Sort Python Solution</span>
<span class="c"># By: Mark Miyashita</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Sorts the input list using the merge sort algorithm.</span>

<span class="sd">    &gt;&gt;&gt; lst = [4, 5, 1, 6, 3]</span>
<span class="sd">    &gt;&gt;&gt; merge_sort(lst)</span>
<span class="sd">    [1, 3, 4, 5, 6]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">lst</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">[:</span><span class="n">mid</span><span class="p">])</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">[</span><span class="n">mid</span><span class="p">:])</span>
    <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Takes two sorted lists and returns a single sorted list by comparing the</span>
<span class="sd">    elements one at a time.</span>

<span class="sd">    &gt;&gt;&gt; left = [1, 5, 6]</span>
<span class="sd">    &gt;&gt;&gt; right = [2, 3, 4]</span>
<span class="sd">    &gt;&gt;&gt; merge(left, right)</span>
<span class="sd">    [1, 2, 3, 4, 5, 6]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">left</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">right</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">right</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">left</span>
    <span class="k">if</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">right</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</code></pre></div>

<h3 id="ruby">Ruby Solution <a href="/interviews/problems/merge_sort/merge_sort_ruby.rb">(download)</a></h3>

<div class="highlight"><pre><code class="ruby"><span class="c1"># !/usr/bin/env ruby</span>
<span class="c1"># Merge Sort Ruby Solution</span>
<span class="c1"># By: Mark Miyashita</span>

<span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">lst</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">1</span>
    <span class="n">lst</span>
  <span class="k">else</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lst</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">lst</span><span class="o">[</span><span class="n">mid</span><span class="o">.</span><span class="n">.lst</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">)</span>
    <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">left</span><span class="o">.</span><span class="n">empty?</span>
    <span class="n">right</span>
  <span class="k">elsif</span> <span class="n">right</span><span class="o">.</span><span class="n">empty?</span>
    <span class="n">left</span>
  <span class="k">elsif</span> <span class="n">left</span><span class="o">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">.</span><span class="n">first</span>
    <span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.left</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="o">[</span><span class="n">right</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">+</span> <span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.right</span><span class="o">.</span><span class="n">length</span><span class="o">]</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>

]]></content>
        <author>
            <name></name>
            <url></url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Getting Started with Python]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="su13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/su13/notes/getting_started_with_python"/>
        <updated>2013-05-14T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/su13/notes/getting_started_with_python</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#welcome">Welcome!</a></li>
  <li><a href="#downloading-and-installing-python-3">Downloading and Installing Python 3</a></li>
  <li><a href="#variables">Variables</a></li>
  <li><a href="#expressions">Expressions</a></li>
  <li><a href="#functions-and-calling-functions">Functions and Calling Functions</a></li>
  <li><a href="#advice-for-the-semester">Advice for the Semester</a></li>
</ul>

<h4 id="welcome">Welcome!</h4>

<p>Welcome to CS61A! For the most part, this course is not about learning Python, the language, but instead, we focus on big computer science ideas. However, to implement those ideas in code…we need Python to do so. So we’re going to spend the first 1-2 weeks going over simple ideas in Python that will allow us to work on implementing the bigger ideas of the course.</p>

<h4 id="downloading-and-installing-python-3">Downloading and Installing Python 3</h4>

<p>In this class, we’re going to be using Python 3 as opposed to Python 2.x. There are a few major changes, enough to make sure that you are always using version 3 instead of any version of 2. If you have any problems installing Python on your computer, please leave a comment below with specific problems you are having.</p>

<p>We can open up our Python <em>interpreter</em> by typing <code>python3</code> into our Terminal. If you did it correctly, you’ll see the following prompt.</p>

<pre><code>&gt;&gt;&gt;
</code></pre>

<h4 id="variables">Variables</h4>

<p>Let’s start with a few fundamentals. First, we have variables. Variables are like labels, they allow us to store values and to use them later. In Python, it does not matter what type of data we store in the variable, it can be a string, integer, function, etc. We’ll learn all about what those are later. For now, let’s define some variables and see how that work!</p>

<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; a
5
&gt;&gt;&gt; b
6
</code></pre>

<p>Here, we defined to variables, <code>a</code> and <code>b</code> and their values are now 5 and 6, respectively.</p>

<p>Strings are like words or sentences and we represent them as being surrounded by either single quotes, <code>'</code> or double quotes, <code>"</code>. We can store strings as variables too.</p>

<pre><code>&gt;&gt;&gt; c = "hello world"
&gt;&gt;&gt; c
'hello world'
</code></pre>

<p>Notice how we defined our string with double quotes, but when we recalled the value, Python represented the same string with single quotes. Either way works and they mean the same thing, just remember that Python uses single quotes when it represents strings.</p>

<p>The reason why we use double quotes sometimes is so that we can represent a string that has a single quote in the middle of it. For example:</p>

<pre><code>&gt;&gt;&gt; d = 'don't do this'
File "&lt;stdin&gt;", line 1
  d = 'don't do this'
             ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</code></pre>

<p>Here, we encounter a syntax error because Python thinks the string ends at <code>'don'</code> and then doesn’t know what to do with the rest. The proper way to represent this string is to do the following:</p>

<pre><code>&gt;&gt;&gt; d = "don't (not) do this"
&gt;&gt;&gt; d
"don't (not) do this"
</code></pre>

<p>Now it works!</p>

<h4 id="expressions">Expressions</h4>

<p>Besides strings, we can work with a variety of other values in Python. Numbers (or integers) are fundamental and they, themselves, are what we call a primitive expression. They are expressions that <em>evaluate</em> to themselves.</p>

<pre><code>&gt;&gt;&gt; 12
12
</code></pre>

<p>We can also create expressions that represent mathematical equations. For example:</p>

<pre><code>&gt;&gt;&gt; 1 + 2
3
&gt;&gt;&gt; 4 - 5
-1
</code></pre>

<p>One thing that you will notice, there are two different types of division. There is normal decimal division and integer division (which rounds down). We call these <code>div</code> and <code>floordiv</code> and they are represented by <code>/</code> and <code>//</code> respectively. </p>

<pre><code>&gt;&gt;&gt; 4 / 5
0.8
&gt;&gt;&gt; 4 // 5
0
&gt;&gt;&gt; 5 // 4
1
</code></pre>

<p>You can think of <code>floordiv</code> as meaning to compute the normal division and then round the result down.</p>

<h4 id="functions-and-calling-functions">Functions and Calling Functions</h4>

<p>In Python, we have some built-in functions that compute common mathematical functions and values. These functions are different from the <em>infix</em> notation that we saw above. When we call functions, we have to evaluate both the <em>operator</em> and all of the <em>operands</em>. In the following example, the function <code>max</code> is our <em>operator</em> and the two values <code>3</code> and <code>5</code> are our operands.</p>

<pre><code>&gt;&gt;&gt; max(3, 5)
5
</code></pre>

<p>The way we go about evaluating this function is that we first evaluate the <em>operator</em>, <code>max</code>. We check the name in our current <em>environment</em> and find that it is the built-in function <code>max</code>. Next, we evaluate each of the <em>operands</em> going from left to right order. In this case, both of the <em>operands</em> are primitive expressions so we just have to evaluate the number for its value. However, we can imagine a scenario in which the <em>operands</em> are themselves expressions. We call this <em>nesting expressions</em>. Take a look at the following example:</p>

<pre><code>&gt;&gt;&gt; max(5, min(6, 7))
6
</code></pre>

<p>Following the rules that we defined above, what do we do first? Well, we first evaluate the <em>operator</em> which in this case is <code>max</code>. Then, we start evaluating the <em>operands</em> from left to right. We evaluate <code>5</code> to the value <code>5</code>, and then we encounter our next <em>operand</em> which happens to be another expression. Since it’s a whole new expression, we must start the process over. If you are familiar with the term <strong>recursion</strong>, this is exactly what we are doing. If you’re not familiar with the term, recursion is something we will spend a lot of time with this semester (so don’t worry!). Recursion is basically repeating the same process until we hit a base case (which you can think of as being the most basic input). We are recursively evaluating the expressions in order, while evaluating any other expressions that might come up along the way. The full order of evaluating this function is this:</p>

<ol>
  <li>Evaluate <code>max</code>, the <em>operator</em> and find that it’s the built-in function.</li>
  <li>Evaluate <code>5</code>, the first <em>operand</em>.</li>
  <li>Evaluate the second <em>operand</em>, <code>min(6, 7)</code>.</li>
  <li>To evaulate the second <em>operand</em>, we start over by evaulating the new operator, <code>min</code>.</li>
  <li>Then, we evaulate the <em>operands</em> in order, first <code>6</code>, then <code>7</code>.</li>
  <li>Then, we <em>apply</em> the <em>operator</em> that we evaluated earlier, in this case, applying the <em>operator</em> <code>min</code> with the <em>operands</em> <code>6</code> and <code>7</code>, evaulates to <code>6</code>.</li>
  <li>Now that we have both of our <em>operands</em> for the original <em>operator</em>, we can now <em>apply</em> <code>max</code> with the <em>operands</em> <code>5</code> and <code>6</code>.</li>
  <li>After applying the function <code>max</code>, we get the final value <code>6</code>.</li>
</ol>

<h4 id="advice-for-the-semester">Advice for the Semester</h4>

<p>One of the best things you can do, for your own learning, is to try things out on your own. There are many things that Python (and other languages) can do that we won’t have time to teach you in this class. Although you won’t be tested on that material, it might help you in learning and understanding the material that we <em>will</em> be testing you on. You also might find random intricacies in Python that might help you on your homeworks. You’re free to use them on your homework unless we explicitly forbid you from using them. It’s up to you to learn as much as you can (but only if you want to)!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Modulus in Logic]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/modulus_in_logic"/>
        <updated>2013-05-12T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/modulus_in_logic</id>
        <content type="html"><![CDATA[
<p>Using the result of your Homework 13 solutions, let’s implement some more math functions! Implement <code>modulus</code> that acts like the <code>mod</code> operator in Python. It should return the remainder.</p>

<pre><code>(fact (% ***YOUR CODE HERE*** ))


(query (% (1 1 1) (1 1) ?what))
; expect Success! ; what: (1)
</code></pre>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Finding the Greatest Common Divisor Using Logic]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/finding_the_greatest_common_divisor_using_logic"/>
        <updated>2013-05-12T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/finding_the_greatest_common_divisor_using_logic</id>
        <content type="html"><![CDATA[
<p>Using the result of Homework 13 and after implmenting <code>modulus</code> <a href="http://markmiyashita.com/cs61a/sp13/problems/modulus_in_logic/">here</a>, you should be able to take those and write a fact for the greatest common divisor. I would recommending reading the Wikipedia article about using Euclid’s method for finding the GCD of two numbers. The link can be found <a href="http://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid.27s_algorithm">here</a>. Post in the comments if you have any questions.</p>

<pre><code>(fact (gcd ***YOUR CODE HERE*** ))


(query (gcd (1 1 1 1) (1 1) ?what))
; expect Success! ; what: (1 1)
</code></pre>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Trees, Trees Everywhere]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/trees_trees_everywhere"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/trees_trees_everywhere</id>
        <content type="html"><![CDATA[<p>Here are a series of Tree Recursion practice problems! For all of these problems, I will be using the Tree class that can be found <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">here</a>.</p>

<p>If you want a template of all of the problems (without solutions), you can download it here: <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree_template.py">tree_template.py</a></p>

<ul>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/is_my_tree_binary_and_searchable/">Is My Tree Binary And Searchable?</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/pre_order_traversal_binary_tree/">Pre Order Traversal</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/in_order_traversal_binary_tree/">In Order Traversal</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/post_order_traversal_binary_tree/">Post Order Traversal</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/flip_tree/">Flip Tree</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/insert_into_binary_search_tree/">Insert Into Binary Search Tree</a></li>
  <li><a href="http://markmiyashita.com/cs61a/sp13/problems/tree_to_reversed_list/">Tree To Reversed List</a></li>
</ul>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Tree To Reversed List]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/tree_to_reversed_list"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/tree_to_reversed_list</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree_to_reversed_list.py">here</a>.</p>

<p>In this problem, the input is a binary tree and the output is a list. The list is formed by getting the rightmost entry first. If you haven’t already, the traversal questions located <a href="http://markmiyashita.com/cs61a/sp13/problems/trees_trees_everywhere/">here</a> may help you.</p>

<pre><code>def tree_to_reversed_list(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; tree_to_reversed_list(t)
    [8, 7, 6, 5, 4, 1]
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def tree_to_reversed_list(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; tree_to_reversed_list(t)
    [8, 7, 6, 5, 4, 1]
    """
    lst = []
    if tree is not None:
        if tree.right:
            lst.extend(tree_to_reversed_list(tree.right))
        lst.append(tree.entry)
        if tree.left:
            lst.extend(tree_to_reversed_list(tree.left))
    return lst
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Pre Order Traversal (Binary Tree)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/pre_order_traversal_binary_tree"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/pre_order_traversal_binary_tree</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/pre_order_traversal.py">here</a>.</p>

<p>This problem is a challenge problem and might touch on some concepts taught mainly in CS61B. However, as a CS61A student who has learned all about tree recursion, you should be able to complete a problem like this.</p>

<p>We like to be able to traverse our trees in order to get all of the elements back into some sort of list. We can traverse the tree in many different ways. Pre Order Traversal is one of them and the algorithm goes like this. First, we will print out or current value, then, we will recursively print out all the values to our left, then recursively print out all the values on the right. Take a look at the doctests below if you are still confused. Post in the comments section if you are still confused after reading the doctests.</p>

<pre><code>def pre_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; pre_order_traversal(t)
    5
    1
    4
    7
    6
    8
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def pre_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; pre_order_traversal(t)
    5
    1
    4
    7
    6
    8
    """
    if tree is None:
        return
    print(tree.entry)
    pre_order_traversal(tree.left)
    pre_order_traversal(tree.right)
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Post Order Traversal (Binary Tree)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/post_order_traversal_binary_tree"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/post_order_traversal_binary_tree</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/post_order_traversal.py">here</a>.</p>

<p>This problem is a challenge problem and might touch on some concepts taught mainly in CS61B. However, as a CS61A student who has learned all about tree recursion, you should be able to complete a problem like this.</p>

<p>We like to be able to traverse our trees in order to get all of the elements back into some sort of list. We can traverse the tree in many different ways. Post Order Traversal is one of them and the algorithm goes like this. First, we will recursively print out all the values to our left, then, we will recursively print out all the values on the right, finally, we will print out the current node’s entry. Take a look at the doctests below if you are still confused. Post in the comments section if you are still confused after reading the doctests.</p>

<pre><code>def post_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; post_order_traversal(t)
    4
    1
    6
    8
    7
    5
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def post_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; post_order_traversal(t)
    4
    1
    6
    8
    7
    5
    """
    if tree is None:
        return
    post_order_traversal(tree.left)
    post_order_traversal(tree.right)
    print(tree.entry)
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[In Order Traversal (Binary Tree)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/in_order_traversal_binary_tree"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/in_order_traversal_binary_tree</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/in_order_traversal.py">here</a>.</p>

<p>This problem is a challenge problem and might touch on some concepts taught mainly in CS61B. However, as a CS61A student who has learned all about tree recursion, you should be able to complete a problem like this.</p>

<p>We like to be able to traverse our trees in order to get all of the elements back into some sort of list. We can traverse the tree in many different ways. In Order Traversal is one of them and the algorithm goes like this. First, we will recursively print out all the values to our left, then, we will print out the current node’s entry, then recursively print out all the values on the right. Take a look at the doctests below if you are still confused. Post in the comments section if you are still confused after reading the doctests.</p>

<pre><code>def in_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; in_order_traversal(t)
    1
    4
    5
    6
    7
    8
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def in_order_traversal(tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; in_order_traversal(t)
    1
    4
    5
    6
    7
    8
    """
    if tree is None:
        return
    in_order_traversal(tree.left)
    print(tree.entry)
    in_order_traversal(tree.right)
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Helper Functions]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/notes/helper_functions"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/notes/helper_functions</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-are-helper-functions">What are Helper Functions?</a></li>
</ul>

<h4 id="what-are-helper-functions">What are Helper Functions?</h4>

<p>Helper functions are useful when you want to extend the amount of parameters that a certain function takes in. Helper functions are generally used to make our lives easier. This occurs most often when working with recursion, especially if you want your function to be tail recursive. </p>

<p>Let’s take a look at the following function:</p>

<pre><code>def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)
</code></pre>

<p>Let’s say our task is to make this function tail recursive. Recall that the definition of tail recursion in its simplest form is to return the answer that we have accumulated throughout all of the function calls, in the last frame. In regular recursion, we must first recursively create frames until we hit the base case. Then from there, we use the base case to build our answer going back up. In tail recursion, we don’t have the “going back up” stage. </p>

<p>We know that we can’t do this while only taking in a single parameter, n, so we look to create a helper function.</p>

<p>Using a helper function can’t ever stop you from solving a problem, as long as you’re using it correctly. In the worst case, you don’t actually need the helper function and you will realize this when some of the parameters of the helper function go unused. The way you determine which extra parameters to include depends on the problem but here are some general tips for deciding what to do:</p>

<ul>
  <li>Am I keeping track of something at each level of recursion like a counter?</li>
  <li>Is this recursive problem supposed to be tail recursive?</li>
  <li>Am I supposed to be accumulating a list or value?</li>
</ul>

<p>If you look out for those three things, you should be able to identify when a helper function might make your life easier. If you have any mroe questions, please post in the comment below.</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Flip Tree]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/flip_tree"/>
        <updated>2013-05-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/flip_tree</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/flip_tree.py">here</a>.</p>

<p>In this problem, we want to swap the left and right branches of our tree. Take a look at the doctests and leave comments below if anything is confusing/you want a hint.</p>

<pre><code>def flip_tree(tree):
    """ Swaps the left and right branches of a tree.
    Does not create a new tree and mutates the original.

    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; flip_tree(t)
    &gt;&gt;&gt; t
    Tree(5, Tree(7, Tree(8), Tree(6)), Tree(1, Tree(4), None))
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def flip_tree(tree):
    """ Swaps the left and right branches of a tree.
    Does not create a new tree and mutates the original.

    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; flip_tree(t)
    &gt;&gt;&gt; t
    Tree(5, Tree(7, Tree(8), Tree(6)), Tree(1, Tree(4), None))
    """
    if tree is None:
        return
    tree.left, tree.right = tree.right, tree.left
    flip_tree(tree.left)
    flip_tree(tree.right)  
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Tail Recursion and Tail Optimized Calls]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/notes/tail_recursion_and_tail_optimized_calls"/>
        <updated>2013-05-10T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/notes/tail_recursion_and_tail_optimized_calls</id>
        <content type="html"><![CDATA[
<p>Frist off, I think this is an excellent article to read about tail recursion and tail calls in Python: [http://paulbutler.org/archives/tail-recursion-in-python/]</p>

<p>Basically, you can write tail recursive functions in any language. Tail recursion, in one sentence, is where you return the answer in the final frame instead of following the frames back up to the original frame. For example, we have factorial which is normally not tail recursive:</p>

<pre><code>def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)
</code></pre>

<p>because it needs to keep track of the <code>n *</code> at each level of recursion.</p>

<p>The following implementation of <code>factorial</code>, is tail recursive because at the end of the last frame, it can return the answer, instead of going back up through all the frames to multiply and compute the answer:</p>

<pre><code>def factorial(n):
    def helper(n, total):
        if n == 1:
            return total
        return helper(n - 1, total * n)
    return helper(n, 1)
</code></pre>

<p>You can’t have tail optimized calls in Python – at least, not like the code that we defined above. You can define your own sort of tail optimized way of evaluating the functions by using lambdas, and I believe the article linked at the top of this post goes into detail about how to implement this if you are interested. In Scheme, the language detects when you have something like the helper function in the example above where your return statement consists of only the recursive call. In the first example, we have the <code>n *</code> and the recursive call which means it cannot be tail optimized because it needs to keep track of all of the frames that it creates. In a tail optimized call, Scheme will get rid of the frames that are no longer necessary.</p>

<p><strong>tl;dr</strong> – Tail recursion can be done in any language where the basic idea is that you return the answer in the final frame of recursion. Tail optimized calls are a Scheme (and some other languages, not including Python) feature where it will get rid of the frames above, if certain conditions are met – such as where the return statement is only the recursive call and nothing else. The cases in which Scheme uses a tail optimized call are located on the lecture slides located <a href="http://www-inst.eecs.berkeley.edu/~cs61a/sp13/slides/35-TailCalls_6pp.pdf">here</a>.</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Is My Tree Binary and Searchable?]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/is_my_tree_binary_and_searchable"/>
        <updated>2013-05-10T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/is_my_tree_binary_and_searchable</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/is_binary_search_tree.py">here</a>.</p>

<p>Given an input tree, we want to test if the tree is a binary search tree. A tree is a binary search tree if for each of its branches, all of the values on the left subtree are less than the entry and all of the values on the right subtree are greater than the entry.</p>

<pre><code>def is_binary_search_tree(tree):
    """
    &gt;&gt;&gt; t = Tree(3, Tree(2), Tree(4))
    &gt;&gt;&gt; is_binary_search_tree(t)
    True
    &gt;&gt;&gt; t = Tree(5, Tree(1, Tree(3)), Tree(6, Tree(10)))
    &gt;&gt;&gt; is_binary_search_tree(t)
    False
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def is_binary_search_tree(tree):
    """
    &gt;&gt;&gt; t = Tree(3, Tree(2), Tree(4))
    &gt;&gt;&gt; is_binary_search_tree(t)
    True
    &gt;&gt;&gt; t = Tree(5, Tree(1, Tree(3)), Tree(6, Tree(10)))
    &gt;&gt;&gt; is_binary_search_tree(t)
    False
    """
    if tree is None:
        return True
    if tree.left and tree.left.entry &gt; tree.entry:
        return False
    if tree.right and tree.right.entry &lt; tree.entry:
        return False
    return is_binary_search_tree(tree.left) and is_binary_search_tree(tree.right)
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Insert Into Binary Search Tree]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/insert_into_binary_search_tree"/>
        <updated>2013-05-10T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/insert_into_binary_search_tree</id>
        <content type="html"><![CDATA[
<p>This problem uses the <a href="http://markmiyashita.com/cs61a/code/tree_recursion/tree.py">Tree Class</a> and the template for this file can be downloaded <a href="http://markmiyashita.com/cs61a/code/tree_recursion/insert.py">here</a>.</p>

<p>In this problem we are going to be inserting an item into a binary search tree. Recall that a binary search tree means that all items on the left of the tree are less than the current entry and all items on the right of the tree are greater than the current entry. Note: We cannot insert into an empty tree because of our implementation. Since we are using None as our empty tree, we can’t add a <code>.entry</code> to None because it is not an object. This function should still work for all other trees though.</p>

<pre><code>def insert(item, tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; insert(2, t)
    &gt;&gt;&gt; t
    Tree(5, Tree(1, None, Tree(4, Tree(2), None)), Tree(7, Tree(6), Tree(8)))
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def insert(item, tree):
    """
    &gt;&gt;&gt; t = Tree(5, Tree(1, None, Tree(4)), Tree(7, Tree(6), Tree(8)))
    &gt;&gt;&gt; insert(2, t)
    &gt;&gt;&gt; t
    Tree(5, Tree(1, None, Tree(4, Tree(2), None)), Tree(7, Tree(6), Tree(8)))
    """
    if tree is None:
        return
    elif item &lt; tree.entry:
        if tree.left:
            insert(item, tree.left)
        else:
            tree.left = Tree(item)
    else:
        if tree.right:
            insert(item, tree.right)
        else:
            tree.right = Tree(item)
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Pets Own the Owners]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/pets_own_the_owners"/>
        <updated>2013-05-09T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/pets_own_the_owners</id>
        <content type="html"><![CDATA[
<p>Given these two classes, what do the following lines evaluate to?</p>

<pre><code>class Owner(object):
    all = []

    def __init__(self, name):
        self.name = name
        self.pets = []
        Owner.all.append(self)

    def add_pet(self, pet):
        self.pets.append(pet)

    def __repr__(self):
        return 'Owner(' + self.name + ')'

class Pet(object):
    all = []

    def __init__(self, name, weight, height):
        self.name = name
        self.weight = weight
        self.height = height
        Pet.all.append(self)

    @property
    def bmi(self):
        return self.weight / (self.height * self.height)

    def __repr__(self):
        return 'Pet(' + self.name + ')'
</code></pre>

<pre><code>&gt;&gt;&gt; bob = Owner('bob')
&gt;&gt;&gt; joe = Owner('joe')
&gt;&gt;&gt; bob.all                 #1

&gt;&gt;&gt; bob.all.append(bob)
&gt;&gt;&gt; joe.all                 #2

&gt;&gt;&gt; type(joe.add_pet)       #3

&gt;&gt;&gt; type(Owner.add_pet)     #4

&gt;&gt;&gt; harry = Pet('harry', 50, 50)
&gt;&gt;&gt; type(harry.bmi)         #5

&gt;&gt;&gt; joe.pets.append(harry)
&gt;&gt;&gt; bob.add_pet(harry)
&gt;&gt;&gt; bob.pets[0].all         #6

&gt;&gt;&gt; bob.pets.append(Pet('jimmy', 40, 10))
&gt;&gt;&gt; bob.pets[1].owner       #7

&gt;&gt;&gt; Pet.all                 #8

&gt;&gt;&gt; jimmy                   #9
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <ol>
    <li>[Owner(bob), Owner(joe)]</li>
    <li>[Owner(bob), Owner(joe), Owner(bob)]</li>
    <li>&lt;class ‘method’&gt;</li>
    <li>&lt;class ‘function’&gt;</li>
    <li>&lt;class ‘float’&gt;</li>
    <li>[Pet(harry)]</li>
    <li>Traceback (most recent call last): <br />
File “&lt;stdin&gt;”, line 1, in &lt;module&gt; <br />
AttributeError: ‘Pet’ object has no attribute ‘owner’</li>
    <li>[Pet(harry), Pet(jimmy)]</li>
    <li>Traceback (most recent call last): <br />
File “&lt;stdin&gt;”, line 1, in &lt;module&gt; <br />
NameError: name ‘jimmy’ is not defined</li>
  </ol>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Once an Infinite Sequence, Always an Infinite Sequence]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/once_an_infinite_sequence_always_an_infinite_sequence"/>
        <updated>2013-05-09T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/once_an_infinite_sequence_always_an_infinite_sequence</id>
        <content type="html"><![CDATA[
<p>This problem is quite involved and also covers a lot of different topics from the course. Namely, it covers: type dispatching, coercion, iterators, generators, streams, dictionaries, and generic functions.</p>

<p>As a warmup, let’s write simple generators, iterators, and streams. Write one of each that represents the natural numbers stream, iterator, and generator. Think about the different components of each that you need.</p>

<pre><code>def make_natural_numbers_generator():
    "***YOUR CODE HERE***"

def make_natural_numbers_stream(first=0):
    "***YOUR CODE HERE***""

class NaturalNumbersIterator(object):
    "***YOUR CODE HERE***"
</code></pre>

<p>Now we’ll move onto type dispatching. If you haven’t already, refresh your memory with <a href="http://markmiyashita.com/cs61a/sp13/notes/generic_functions_and_type_dispatching/">this note</a>.</p>

<p>We’re going to define a generic function <code>add</code> that takes in two infinite sequences and produces a generator that represents the two sequences added together. For example, I can input the natural numbers stream and the natural numbers iterator and get back a generator where the first 5 elements are 0, 2, 4, 6, 8. To do this, we will need the <code>type_tag</code> function that we generally use for type dispatching.</p>

<pre><code>def type_tag(x):
    return type_tag.tags[type(x)]

type_tag.tags = {GeneratorType: 'generator', NaturalNumbers: 'iterator', Stream: 'stream'}
</code></pre>

<p>You can find get the class <code>GeneratorType</code> by importing from <code>types</code>: <code>from types import GeneratorType</code>.</p>

<p>Now we want to define <code>add</code>.</p>

<pre><code>def add(seq1, seq2):
    "***YOUR CODE HERE***"

add.impl = { "***YOUR CODE HERE***" }
</code></pre>

<p>Next, we need to define all of the different functions that compute the addition of the different infinite sequences that we can have. I counted 9 functions that must be created and as a hint, some can be used more than once. I created the following 6 functions. It’s a good exercise to go through all of them because it will cement your knowledge of iterators, generators, and streams.</p>

<pre><code>def add_generators(gen1, gen2):
    "*** YOUR CODE HERE***"

def add_generator_and_iterator(gen, iterator):
    "*** YOUR CODE HERE***"

def add_generator_and_stream(gen, stream):
    "*** YOUR CODE HERE***"

def add_iterator_and_stream(iterator, stream):
    "*** YOUR CODE HERE***"

def add_iterators(i1, i2):
    "*** YOUR CODE HERE***"

def add_streams(s1, s2):
    "*** YOUR CODE HERE***"
</code></pre>

<p>Now we are able to add two infinite sequences together. After you write this code, the following should work:</p>

<pre><code>&gt;&gt;&gt; s = make_natural_numbers_stream()
&gt;&gt;&gt; g = make_natural_numbers_generator()
&gt;&gt;&gt; i = NaturalNumbersIterator()
&gt;&gt;&gt; added_s_and_g = add(s, g)
&gt;&gt;&gt; next(added_s_and_g)
0
&gt;&gt;&gt; next(added_s_and_g)
2
&gt;&gt;&gt; next(added_s_and_g)
4
&gt;&gt;&gt; g2 = make_natural_numbers_generator()
&gt;&gt;&gt; added_g2_and_i = add(g2, i)
&gt;&gt;&gt; next(added_g2_and_i)
0
&gt;&gt;&gt; next(added_g2_and_i)
2
&gt;&gt;&gt; next(added_g2_and_i)
4
&gt;&gt;&gt; next(added_g2_and_i)
6
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def make_natural_numbers_generator():
    i = 0
    while True:
        yield i
        i += 1

def make_natural_numbers_stream(first=0):
    def compute_rest():
        return make_natural_numbers_stream(first + 1)
    return Stream(first, compute_rest)

class NaturalNumbersIterator(object):
    def __init__(self):
        self.current = 0

    def __next__(self):
        next = self.current
        self.current += 1
        return next

    def __iter__(self):
        return self
</code></pre>

  <p>Here are the natural numbers generator, stream, and iterator. Remember that an iterator needs both a <code>__next__</code> and an <code>__iter__</code> method and that a Stream always keeps track of <em>how</em> to compute its rest.</p>

  <pre><code>def add(seq1, seq2):
    types = (type_tag(seq1), type_tag(seq2))
    return add.impl[types](seq1, seq2)

def add_generators(gen1, gen2):
    while True:
        yield next(gen1) + next(gen2)

def add_generator_and_iterator(gen, iterator):
    while True:
        yield next(gen) + next(iterator)

def add_generator_and_stream(gen, stream):
    while True:
        yield next(gen) + stream.first
        stream = stream.rest

def add_iterator_and_stream(iterator, stream):
    while True:
        yield next(iterator) + stream.first
        stream = stream.rest

def add_iterators(i1, i2):
    while True:
        yield next(i1) + next(i2)

def add_streams(s1, s2):
    while True:
        yield s1.first + s2.first
        s1, s2 = s1.rest, s2.rest

add.impl = {('generator', 'generator') : add_generators,
            ('generator', 'iterator') : add_generator_and_iterator,
            ('generator', 'stream') : add_generator_and_stream,
            ('iterator', 'stream') : add_iterator_and_stream,
            ('iterator', 'iterator') : add_iterators,
            ('stream', 'stream') : add_streams,
            ('stream', 'generator') : lambda s, g: add_generator_and_stream(g, s),
            ('iterator', 'generator') : lambda i, g: add_generator_and_iterator(g, i),
            ('stream', 'iterator') : lambda s, i: add_iterator_and_stream(i, s)
}
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Mutable Reverse List]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/mutable_reverse_list"/>
        <updated>2013-05-09T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/mutable_reverse_list</id>
        <content type="html"><![CDATA[
<p>In this problem, we want to do several things and we want to do them all at once. First, we want to reverse the input list; however, we also want to mutate the input list. In addition, we add the restriction that we want to do this recursively. </p>

<pre><code>def mutable_reverse(lst):
    """
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [4, 1, 5, 4, 1]
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4, 5]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [5, 4, 1, 5, 4, 1]
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <p>There are several solutions to this problem. Some are more efficient, some have fewer lines, but all work. Here are a few that you guys came up with during the review session today. Send me an email if this was your solution and I’ll include your name here!</p>

  <pre><code>def mutable_reverse(lst):
    """
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [4, 1, 5, 4, 1]
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4, 5]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [5, 4, 1, 5, 4, 1]
    """
    def helper(index, lst):
        if len(lst) % 2 == 0 and index == len(lst) // 2 or len(lst) % 2 == 1 and index == len(lst) // 2 + 1:
            return
        lst[index], lst[len(lst) - 1 - index] = lst[len(lst) - 1 - index], lst[index]
        helper(index + 1, lst)
    helper(0, lst)

def mutable_reverse(lst):
    """
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [4, 1, 5, 4, 1]
    &gt;&gt;&gt; l = [1, 4, 5, 1, 4, 5]
    &gt;&gt;&gt; mutable_reverse(l)
    &gt;&gt;&gt; l
    [5, 4, 1, 5, 4, 1]
    """
    if len(lst) &gt; 0:
        item = lst.pop()
        mutable_reverse(lst)
        lst.insert(0, item)
</code></pre>

  <p>The first keeps track of an index of which values it has returned. When it reaches halfway, it stops.</p>

  <p>The second solution is very elegant and it takes advantage of using recursion as an implicit stack. Don’t worry if you don’t know what that it, you’ll learn all about stacks in CS61B. Basically, when drawing out the environment diagram, we’re keeping the variable <code>item</code> at each level and then inserting it at the beginning as we traverse back up the frames. </p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Binary Search]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/binary_search"/>
        <updated>2013-05-09T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/binary_search</id>
        <content type="html"><![CDATA[
<p>In this problem, our input is an item and a sorted list. We want to see if the item exists in the list, but we want to do this search in Θ(log n). That means that we cannot create copies of the list, we can’t slice the list, and we can’t just simply iterate through the list. Instead, we will use a technique called binary search. You can find more information about the algorithm <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">here</a>.</p>

<p>The idea is that we will first check the middle item. Based off of the middle item, we will decide if we want to go left or right in the tree. If the middle item is less than our input item, then we will go right. If not, we will go left. Note: a helper function may be useful.</p>

<pre><code>def binary_search(item, lst):
    """
    &gt;&gt;&gt; l = [1, 4, 5, 8, 10, 12]
    &gt;&gt;&gt; binary_search(4, l)
    True
    &gt;&gt;&gt; binary_search(9, l)
    False
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def binary_search(item, lst):
    """
    &gt;&gt;&gt; l = [1, 4, 5, 8, 10, 12]
    &gt;&gt;&gt; binary_search(4, l)
    True
    &gt;&gt;&gt; binary_search(9, l)
    False
    """
    def helper(item, lst, low, high):
      if low &gt;= high:
          return False
      mid = (low + high) // 2
      if item == lst[mid]:
          return True
      if item &lt; lst[mid]:
          return helper(item, lst, low, mid - 1)
      if item &gt; lst[mid]:
          return helper(item, lst, mid + 1, high)
    return helper(item, lst, 0, len(lst))
</code></pre>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Find Secret (Using Recursion)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/find_secret_using_recursion"/>
        <updated>2013-05-08T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/find_secret_using_recursion</id>
        <content type="html"><![CDATA[
<p>We want to see if the letters within out “secret” can be found, in order, in the given sentence. If it is, we will return back a list of indices that we will use as a secret code. If the secret word’s letters cannot be found within the sentence, then we have failed and should return False. Yes, this problem can be done using iteration instead of recursion, but let’s stick to practicing recursion. Hint: You might want to use a helper.</p>

<pre><code>def find_secret(secret, sentence):
    """
    If the individual letters of the secret are in order within the sentence,
    then the function reutrns the list of indices of those letters. If not, it returns False.

    &gt;&gt;&gt; secret = "mark"
    &gt;&gt;&gt; sentence = "hi my name is ridiculously karl."
    &gt;&gt;&gt; find_secret(secret, sentence)
    [3, 7, 14, 27]
    &gt;&gt;&gt; find_secret("hello", sentence)
    False
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def find_secret(secret, sentence):
    """
    If the individual letters of the secret are in order within the sentence,
    then the function reutrns the list of indices of those letters. If not, it returns False.

    &gt;&gt;&gt; secret = "mark"
    &gt;&gt;&gt; sentence = "hi my name is ridiculously karl."
    &gt;&gt;&gt; find_secret(secret, sentence)
    [3, 7, 14, 27]
    &gt;&gt;&gt; find_secret("hello", sentence)
    False
    """
    def helper(secret, sentence, indices, index):
        if len(secret) == 0:
            return indices
        if len(sentence) == 0:
            return False
        if secret[0] == sentence[0]:
            return helper(secret[1:], sentence[1:], indices + [index], index + 1)
        return helper(secret, sentence[1:], indices, index + 1)
    return helper(secret, sentence, [], 0)
</code></pre>

  <p>If we have a secret that is the empty string, then that automatically exists in our sentence so we return the indices that we have accumulated. If the sentence itself is empty and the secret is not empty, then we have failed and must return False.</p>

  <p>In our recursive cases, we have either found the letter or we have not. If we have found the letter, then we reduce our secret and our sentence by cutting off the first letter. We also increase our index by 1 to move to the next position in the sentence and we also add the current index to our list of indices. </p>

  <p>If we did not find the letter, we just pass through the same secret and we reduce our sentence by one character, keep the indices the same because we didn’t find anything and increase our index by 1. The index just helps us keep track of where we are within the sentence. </p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Install Heroku and Deploy Your App]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/install_heroku_and_deploy_your_app"/>
        <updated>2013-04-13T01:39:00-07:00</updated>
        <id>markmiyashita.com:/blog/install_heroku_and_deploy_your_app</id>
        <content type="html"><![CDATA[<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#installation">Installation</a></li>
  <li><a href="#deploying-your-app">Deploying Your App</a>
    <ul>
      <li><a href="#ruby-on-rails">Ruby on Rails</a></li>
      <li><a href="#nodejs">Node.js</a></li>
      <li><a href="#django">Django</a></li>
    </ul>
  </li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>So, you’ve finished adding the final touches to your app and now you want to put in on the Internet for everyone else to use. How do I do that?!</p>

<p>Well, there are several options available to you at this point, most of them are free. The most popular free option is to use Heroku and I’m going to be walking through the steps to set up Heroku on your computer and deploy your first app.</p>

<p>First, let’s talk a little about what Heroku is. Heroku is a cloud application platform. In one sentence, Heroku allows you to serve your web applications using their servers and allows other computers to access your site at the specified url. Heroku has mastered the art of simplicity, and setting up an app and deploying has never been easier. Let’s dive into the steps necessary to do this.</p>

<p>Since Heroku is a service, we’re first going to have to sign up for an account. You can do that <a href="https://id.heroku.com/signup/devcenter">here</a>.</p>

<h2 id="installation">Installation</h2>

<ul>
  <li>First, we need to download the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>.</li>
</ul>

<p>The Heroku Toolbelt install a bunch of command line tools that allow you to easily create and edit apps straight from your own computer. It mainly gives us access to the <code>heroku</code> command that allows us to do a lot of different heroku-specific commands. </p>

<ul>
  <li>Next, let’s log in to our Heroku accounts using the command line. Run the following command:</li>
</ul>

<!-- code block below -->

<pre><code>$ heroku login
Enter your Heroku credentials.
Email: example@example.com
Password: 
Could not find an existing public key.
Would you like to generate one? [Yn] 
Generating new SSH public key.
Uploading ssh public key /Users/mark/.ssh/id_rsa.pub
</code></pre>

<p>If prompted to generate a public key, go ahead and enter “Y” and proceed to do so.</p>

<p>That’s it for installation! Now we just need to figure out how to deploy our apps using the new command line interface that we just installed. Go on to the next section if you’re ready.</p>

<h2 id="deploying-your-app">Deploying Your App</h2>

<p>Heroku can deploy a bunch of apps and you can find different tutorials listed on their website <a href="https://devcenter.heroku.com/articles/quickstart#step-4-deploy-an-application">here</a>. I’m going to outline the three most popular: Ruby on Rails, Node.js, and Django.</p>

<h2 id="ruby-on-rails">Ruby on Rails</h2>

<p>If you already have an existing Rails app, you don’t need to complete this first step.</p>

<p>Create a new app:</p>

<pre><code>rails my_new_app
cd my_new_app
</code></pre>

<p>Heroku uses a PostgreSQL database so we’re going to have to edit our <code>Gemfile</code> to reflect that. Change this line:</p>

<pre><code>gem 'sqlite3'
</code></pre>

<p>To this:</p>

<pre><code>gem 'pg'
</code></pre>

<p>Make sure everything works locally by running:</p>

<pre><code>bundle install
</code></pre>

<p>If you aren’t using Git already, you definitely should be. Git allows you to quickly keep track of changes and to work easily and collaboratively with others. Let’s initialize our app to use git.</p>

<pre><code>git init
git add .
git commit -m "initial commit"
</code></pre>

<p>Now let’s deploy our app to Heroku. First, let’s create a new app using the Heroku Toolbelt that we installed earlier. The argument below, “my-app-name”, is the name that we are giving our app. Feel free to choose anything here, it will eventually become the url for your app.</p>

<pre><code>$ heroku create my-app-name
Creating my-app-name... done, stack is cedar
http://my-app-name.herokuapp.com/ | git@heroku.com:my-app-name.git
Git remote heroku added
</code></pre>

<p>What the command did was create a new app with a name that you specified. If we want to give our app a random name, we can run the command: <code>heroku create</code> without an optional name and heroku will create a name for us. Let’s push our code to heroku and deploy app.</p>

<pre><code>$ git push heroku master
Counting objects: 67, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (52/52), done.
Writing objects: 100% (67/67), 86.33 KiB, done.
Total 67 (delta 5), reused 0 (delta 0)

-----&gt; Heroku receiving push
-----&gt; Rails app detected
-----&gt; Installing dependencies using Bundler version 1.1
       Checking for unresolved dependencies.
       Unresolved dependencies detected.
       Running: bundle install --without development:test --path vendor/bundle --deployment
       Fetching source index for http://rubygems.org/
       Installing rake (0.8.7)
       ...
       Installing rails (3.0.5)
       Your bundle is complete! It was installed into ./vendor/bundle
-----&gt; Rails plugin injection
       Injecting rails_log_stdout
       Injecting rails3_serve_static_assets
-----&gt; Discovering process types
       Procfile declares types -&gt; (none)
       Default types for Rails -&gt; console, rake, web, worker
-----&gt; Compiled slug size is 8.3MB
-----&gt; Launching... done, v5
       http://my-app-name.herokuapp.com deployed to Heroku

To git@heroku.com:my-app-name.git
 * [new branch]      master -&gt; master
</code></pre>

<p>Now that our app has been pushed to Heroku, we need to initialize our database. Then we can now open our app!</p>

<pre><code>heroku run rake db:reset
heroku open
</code></pre>

<p>Now, whenever we want to push updates to our app, we run the following sequence.</p>

<pre><code>git add .
git commit -m "updates for this commit"
git push heroku master
</code></pre>

<p>And our app will be updated and the changes can be seen immediately at our url.</p>

<h2 id="nodejs">Node.js</h2>

<p>If you already have an existing Node app, you don’t have to complete this first step.</p>

<p>Create a new folder and make a new file and add the following contents:</p>

<pre><code>mkdir node_app
cd node_app
touch web.js
</code></pre>

<p>We’re going to create a simple web server that uses Express and displays “Hello World!”</p>

<h4 id="webjs">web.js</h4>

<pre><code>var express = require("express");
var app = express();
app.use(express.logger());

app.get('/', function(request, response) {
  response.send('Hello World!');
});

var port = process.env.PORT || 5000;
app.listen(port, function() {
  console.log("Listening on " + port);
});
</code></pre>

<p>Now let’s create another file <code>package.json</code> that will contain information about the dependencies of our app.</p>

<h4 id="packagejson">package.json</h4>
<pre><code>{
  "name": "node-example",
  "version": "0.0.1",
  "dependencies": {
    "express": "3.1.x"
  },
  "engines": {
    "node": "0.10.x",
    "npm": "1.2.x"
  }
}
</code></pre>

<p>Now use the command <code>npm</code> to install our dependencies.</p>

<pre><code>npm install
</code></pre>

<p>Lastly, we’re going to make a <code>Procfile</code> that is going to declare what processes we want to run once we deploy.</p>

<pre><code>web: node web.js
</code></pre>

<p>You can now start your app using Foreman with the following command.</p>

<pre><code>foreman start
</code></pre>

<p>If you aren’t using Git already, you definitely should be. Git allows you to quickly keep track of changes and to work easily and collaboratively with others. Let’s initialize our app to use git.</p>

<pre><code>git init
git add .
git commit -m "initial commit"
</code></pre>

<p>Now let’s deploy our app to Heroku. First, let’s create a new app using the Heroku Toolbelt that we installed earlier. The argument below, “my-app-name”, is the name that we are giving our app. Feel free to choose anything here, it will eventually become the url for your app.</p>

<pre><code>$ heroku create my-app-name
Creating my-app-name... done, stack is cedar
http://my-app-name.herokuapp.com/ | git@heroku.com:my-app-name.git
Git remote heroku added
</code></pre>

<p>What the command did was create a new app with a name that you specified. If we want to give our app a random name, we can run the command: <code>heroku create</code> without an optional name and heroku will create a name for us. Let’s push our code to heroku and deploy app.</p>

<pre><code>$ git push heroku master
Counting objects: 343, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (224/224), done.
Writing objects: 100% (250/250), 238.01 KiB, done.
Total 250 (delta 63), reused 0 (delta 0)

-----&gt; Node.js app detected
-----&gt; Resolving engine versions
       Using Node.js version: 0.10.3
       Using npm version: 1.2.18
-----&gt; Fetching Node.js binaries
-----&gt; Vendoring node into slug
-----&gt; Installing dependencies with npm
       ....
       Dependencies installed
-----&gt; Building runtime environment
-----&gt; Discovering process types
       Procfile declares types -&gt; web

-----&gt; Compiled slug size: 4.1MB
-----&gt; Launching... done, v9
       http://my-app-name.herokuapp.com deployed to Heroku

To git@heroku.com:my-app-name.git
 * [new branch]      master -&gt; master
</code></pre>

<p>Once we have finished deploying our app, we can access it by entering in the following command.</p>

<pre><code>heroku open
</code></pre>

<h2 id="django">Django</h2>

<p>Django instructions are a little more complex and I believe that the Heroku instructions can explain it better than I can. For now, view the instructions <a href="https://devcenter.heroku.com/articles/django">here</a>. I will update this post in the future.</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Orders of Growth Practice]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/orders_of_growth_practice"/>
        <updated>2013-04-04T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/orders_of_growth_practice</id>
        <content type="html"><![CDATA[
<p>Given the functions below, analyze the run time of each in Big Theta notation.</p>

<pre><code>def factorial(n):
    if n &lt; 2:
        return 1
    return n * factorial(n - 1)

def fib(n):
    if n &lt; 2:
        return 1
    return fib(n - 1) + fib(n - 2)

def foo(n):
    while n &gt; 1:
        print(n)
        n = n // 2

def bar(n):
    while n &gt; 1:
        x = n
        while x &gt; 1:
            print(n, x)
            x -= 1
        n -= 1

def baz(n):
    while n &gt; 1:
        x = n
        while x &gt; 1:
            print(n, x)
            x = x // 2
        n -= 1

def buffalo(n):
    while n &gt; 0:
        if n % 7 == 0:
            return n
        n -= 1

def tricycle(n):
    sum = 0
    for i in range(n):
        for j in range(n):
          sum += j
    return sum

def yoyo(n):
    total, counter = 0, 0
    for i in range(n):
        while counter == 0:
            total += (i + counter)
            counter += 1
        return total

def toilet(n):
    i = n
    def boss(n):
        nonlocal i
        print(n)
        if i &gt; 0:
            i -= 1
            boss(i)
        return i
    return boss(n // 2)
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def factorial(n):
    if n &lt; 2:
        return 1
    return n * factorial(n - 1)
</code></pre>

  <p>Θ(n)</p>

  <pre><code>def fib(n):
    if n &lt; 2:
        return 1
    return fib(n - 1) + fib(n - 2)
</code></pre>

  <p>For the sake of this class, this is exponential and approximately Θ(2<sup>n</sup>). It is not exactly Θ(2<sup>n</sup>) and you will learn more about this in CS61B.</p>

  <pre><code>def foo(n):
    while n &gt; 1:
        print(n)
        n = n // 2
</code></pre>

  <p>Θ(log n)</p>

  <pre><code>def bar(n):
    while n &gt; 1:
        x = n
        while x &gt; 1:
            print(n, x)
            x -= 1
        n -= 1
</code></pre>

  <p>Θ(n<sup>2</sup>)</p>

  <pre><code>def baz(n):
    while n &gt; 1:
        x = n
        while x &gt; 1:
            print(n, x)
            x = x // 2
        n -= 1
</code></pre>

  <p>Θ(n log n)</p>

  <pre><code>def buffalo(n):
    while n &gt; 0:
        if n % 7 == 0:
            return n
        n -= 1
</code></pre>

  <p>Θ(1)</p>

  <pre><code>def tricycle(n):
    sum = 0
    for i in range(n):
        for j in range(n):
          sum += j
    return sum
</code></pre>

  <p>Θ(n<sup>2</sup>)</p>

  <pre><code>def yoyo(n):
    total, counter = 0, 0
    for i in range(n):
        while counter == 0:
            total += (i + counter)
            counter += 1
        return total
</code></pre>

  <p>Θ(1)</p>

  <pre><code>def toilet(n):
    i = n
    def boss(n):
        nonlocal i
        print(n)
        if i &gt; 0:
            i -= 1
            boss(i)
        return i
    return boss(n // 2)
</code></pre>

  <p>Θ(n)</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Map and Filter Rlist (Object Version)]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/map_and_filter_rlist_object_version"/>
        <updated>2013-03-19T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/map_and_filter_rlist_object_version</id>
        <content type="html"><![CDATA[
<p>We’ve already seen how to implement <code>map</code> and <code>filter</code> using our tuple/functional abstraction for rlists, now let’s implement the same functions using the class version. You should be able to write these from scratch but here are the previous implementations of <a href="http://markmiyashita.com/cs61a/sp13/problems/map_rlist/">map</a> and <a href="http://markmiyashita.com/cs61a/sp13/problems/filter_rlist/">filter</a>. Here is the class Rlist that we will be using as our abstraction.</p>

<pre><code>class Rlist(object):
    """A recursive list consisting of a first element and the rest.

    &gt;&gt;&gt; s = Rlist(1, Rlist(2, Rlist(3)))
    &gt;&gt;&gt; len(s)
    3
    &gt;&gt;&gt; s[0]
    1
    &gt;&gt;&gt; s[1]
    2
    &gt;&gt;&gt; s[2]
    3
    """
    class EmptyList(object):
        def __len__(self):
            return 0
    empty = EmptyList()

    def __init__(self, first, rest=empty):
        self.first = first
        self.rest = rest

    def __repr__(self):
        f = repr(self.first)
        if self.rest is Rlist.empty:
            return 'Rlist({0})'.format(f)
        else:
            return 'Rlist({0}, {1})'.format(f, repr(self.rest))

    def __len__(self):
        return 1 + len(self.rest)

    def __getitem__(self, i):
        if i == 0:
            return self.first
        return self.rest[i - 1]
</code></pre>

<p>Let’s write our functions <code>map</code> and <code>filter</code> that work for the Rlist class. Here are some blank functions to fill in:</p>

<pre><code>def map_rlist(fn, s):
    """ Return an Rlist resulting from mapping fn over the elements of s.

    &gt;&gt;&gt; s = Rlist(1, Rlist(2, Rlist(3)))
    &gt;&gt;&gt; map_rlist(lambda x: x * x, s)
    Rlist(1, Rlist(4, Rlist(9)))
    """
    "***YOUR CODE HERE***"

def filter_rlist(fn, s):
    """ Return an Rlist that removes all of the elements that do not satisfy
    the input function.

    &gt;&gt;&gt; s = Rlist(1, Rlist(2, Rlist(3)))
    &gt;&gt;&gt; filter_rlist(lambda x: x%2==0, s)
    Rlist(2)
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def map_rlist(fn, s):
    """ Return an Rlist resulting from mapping fn over the elements of s.

    &gt;&gt;&gt; s = Rlist(1, Rlist(2, Rlist(3)))
    &gt;&gt;&gt; map_rlist(lambda x: x * x, s)
    Rlist(1, Rlist(4, Rlist(9)))
    """
    if s is Rlist.empty:
        return s
    return Rlist(fn(s.first), map_rlist(fn, s.rest))

def filter_rlist(fn, s):
    """ Return an Rlist that removes all of the elements that do not satisfy
    the input function. 

    &gt;&gt;&gt; s = Rlist(1, Rlist(2, Rlist(3)))
    &gt;&gt;&gt; filter_rlist(lambda x: x%2==0, s)
    Rlist(2)
    """
    if s is Rlist.empty:
        return s
    if fn(s.first):
        return Rlist(s.first, filter_rlist(fn, s.rest))
    return filter_rlist(fn, s.rest)
</code></pre>

  <p>Our implementations for the functions remain the same as before when we had a different abstraction. The only thing that has changed is the fact that we now call our first and rest in different ways. Previously, we used <code>first(r)</code>, now we call <code>r.first</code>.</p>

  <p>For map, we still want to return the empty rlist when the input is the empty rlist. Then, we want to apply the function to the first item of our rlist and recursively call map on the rest of our rlist.</p>

  <p>For filter, we want to check if the first item satisfies our input function. If it does satisfy the function, then we can keep that item and recursively call filter on the rest of our rlist. If it does not, then we can ignore the first item entirely and recursively call filter on the rest of the rlist.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Generic Functions and Type Dispatching]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/notes/generic_functions_and_type_dispatching"/>
        <updated>2013-03-18T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/notes/generic_functions_and_type_dispatching</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#purpose">Purpose</a></li>
  <li><a href="#type-tag-function">Type Tag Function</a></li>
  <li><a href="#creating-our-dictionaries">Creating Our Dictionaries</a></li>
  <li><a href="#putting-it-all-together">Putting it all Together</a></li>
</ul>

<h4 id="purpose">Purpose</h4>

<p>Generic functions are functions that we can create the are able to work on a variety of different objects. For example, if we have a Square class and a Rectangle class and we want to find the area of either, we should be able to make one function that takes in either of the objects, figures out what the type of the object is, and calls the right function to find the area for that object.</p>

<h4 id="type-tag-function">Type Tag Function</h4>

<p>Let’s start be making and understanding out <code>type_tag</code> function. We need some way of inspecting what type our input is, so we will be using the <code>type</code> function that takes in any object and returns the class that the object is an instance of. Take a look at the examples below:</p>

<pre><code>&gt;&gt;&gt; t = []
&gt;&gt;&gt; type(t)
&lt;class 'list'&gt;
</code></pre>

<p>We can also compare the type of something by using the normal <code>==</code> operator.</p>

<pre><code>&gt;&gt;&gt; t = []
&gt;&gt;&gt; type(t) == list
True
</code></pre>

<p>Our <code>type_tag</code> function is going to take in a generic object, look up its type, and then find that type in our <code>type_tag.tags</code> dictionary that we will define later. Here’s what our <code>type_tag</code> function will look like.</p>

<pre><code>def type_tag(generic_object):
    return type_tag.tags[type(generic_object)]
</code></pre>

<p>Let’s break this down. First, we are checking the type of our object. Then we are using the type of our object as the key that we are looking up in the <code>type_tag.tags</code> dictionary and we will get back its value. The function itself will return this value that it finds by looking up the type.</p>

<p>We’re going to use this to map our class names to some broader name that can represent a bunch of different classes. For this, we are going to use the following scenario. Say we have a bunch of different types of animals, all of which have a different reproduction rate. Cats reproduce at the rate of 0.1n, Birds reproduce at the rate of n<sup>2</sup> and Rabbits reproduce at the rate of 2<sup>n</sup>, where n is the number of years. However, we can have different types of Birds such as a Parrot, a BlueJay, and a Pigeon. Each of these birds have the same reproduction rate, however, we can now have different instances of the Bird class. Let’s define our classes as such.</p>

<pre><code>class Bird(object):
    wings = 2

class Cat(object):
    meows = 2

class Rabbit(object):
    carrots = 100

class Parrot(Bird):
    colors = 'lots'

class BlueJay(Bird):
    colors = 'blue'

class Pigeon(Bird):
    colors = 'grey'
</code></pre>

<h4 id="creating-our-dictionaries">Creating Our Dictionaries</h4>

<p>The body of the classes don’t matter that much for this example. So we need to construct some sort of dictionary that maps our class names to our shorter broader names. We want to do this because we only want to define one function that computes the reproduction rate for Birds. We don’t want to have one for each of the Parrot, BlueJay, and Pigeon classes because they are all Birds and all Birds have the same reproduction rate. Our dictionary will be defined as follows:</p>

<pre><code>type_tag.tags = {Bird: 'bird', Cat: 'cat', Rabbit: 'rabbit', Parrot: 'bird', BlueJay: 'bird', Pigeon: 'bird'}
</code></pre>

<p>Now for a test, follow along with the code below and make sure you understand it. We will be making a series of objects and then get its type tag by passing it through the <code>type_tag</code> function.</p>

<pre><code>&gt;&gt;&gt; p = Parrot()
&gt;&gt;&gt; pi = Pigeon()
&gt;&gt;&gt; c = Cat()
&gt;&gt;&gt; r = Rabbit()
&gt;&gt;&gt; type_tag(r)
'rabbit'
&gt;&gt;&gt; type_tag(p)
'bird'
&gt;&gt;&gt; type_tag(c)
'cat'
&gt;&gt;&gt; type_tag(pi)
'bird'
</code></pre>

<p>Now, we need to construct a second dictionary, this time mapping our tags to our functions that work for each tag. For the Cat class, we need to make a function that takes in a <code>number_of_years</code> and correctly computes the number of Cats we will have. We also need to do the same for the Rabbit and Bird classes. Let us define it as follows:</p>

<pre><code>&gt;&gt;&gt; reproduction_rates = {}
&gt;&gt;&gt; reproduction_rates['cat'] = lambda years: 0.1 * years
&gt;&gt;&gt; reproduction_rates['bird'] = lambda years: years ** 2
&gt;&gt;&gt; reproduction_rates['rabbit'] = lambda years: 2 ** years
</code></pre>

<h4 id="putting-it-all-together">Putting it all Together</h4>

<p>Great! Now we want to construct our generic function, <code>children_on_the_nth_year(obj, n)</code>. This funtion is going to take in a <em>generic object</em> (some sort of animal that we defined above) and a number <code>n</code> that will calculate the amount of children that the animal will have on the nth year based on its reproduction rate. For now, let’s pretend that we have a dictionary that maps our short names (or tags) to functions that correctly compute the number of children for each object. We need some way to figure out what type our object is, look it up in this dictionary, then call that function on our input n. We define it as follows:</p>

<pre><code>def children_on_the_nth_year(obj, n):
    tag = type_tag(obj)
    return reproduction_rates[tag](n)
</code></pre>

<p>Does this work? Let’s try some examples to see if it does indeed work.</p>

<pre><code>&gt;&gt;&gt; p = Parrot()
&gt;&gt;&gt; children_on_the_nth_year(p, 2)
4
&gt;&gt;&gt; r = Rabbit()
&gt;&gt;&gt; children_on_the_nth_year(r, 3)
8
</code></pre>

<p>It seems to be working. Now let’s try to understand <em>why</em> it’s working.</p>

<p>We first create a Parrot object and call it <code>p</code>. Then we call <code>children_on_the_nth_year</code> with the object as our first argument and the number 2 as our second argument. What will <code>tag</code> equal after executing the first line of the function? Remember that <code>type_tag</code> looks up the class name for our object, in this case it would be looking up Parrot, and in the <code>type_tag.tags</code> dictionary we would lookup the key Parrot and get back the value <code>'bird'</code>. We store that as the value <code>tag</code>. Then, on the next line, we lookup that tag that we just found in our <code>reproduction_rates</code> dictionary. What type of object will this dictionary return? It will give us back a function. What does this function do? It takes in some number, which represents the number of years, and returns how many children that animal will have that year. In this instance, we lookup <code>'bird'</code> and get back the lambda function <code>lambda years: years ** 2</code>. With the input now being <code>n</code> which is the value 2 in this example, the function returns that value <code>2 ** 2</code> which is just 4. The overall function will now return 4 and that is our answer. The similar process applies to the Rabbit, however, this time its tag is ‘rabbit’ and the function will be for the rabbit and not for the bird. </p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Python *args and **kwargs]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/python-args-and-kwargs"/>
        <updated>2013-03-14T15:38:00-07:00</updated>
        <id>markmiyashita.com:/blog/python-args-and-kwargs</id>
        <content type="html"><![CDATA[<p>In Python, there are two special symbols that you can use when defining functions to allow them to take in a variable number of arguments. The syntax is to use the symbol <code>*</code> to take in a variable number of arguments; by convention, it is often used with the word <code>args</code>. What <code>*args</code> allows you to do is take in more arguments than the normal of formal arguments that you previously defined. With <code>*args</code>, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments). Here’s an example which should make this clear:</p>

<pre><code>def func_with_two(one, two):
    """
    This function only takes in two arguments because we explicitly
    defined two formal parameters. Any more or any less will cause an
    error.
    """

def func_with_start_args(*args):
    """
    This function can take in any number of arguments, including zero!
    """

def func_with_both(one, two, *args):
    """
    This function requires &lt;i&gt;at least&lt;/i&gt; two arguments. The *args at the end
    says that it can take just two arguments or any number of arguments as long
    as there are at least two.
    """
</code></pre>

<p>What can this be used for? Plenty of things. Say we wanted to make a multiply function that took in a any number of arguments and was able to multiply them all together. We could do this using *args. Here’s another example:</p>

<pre><code>from operator import mul
from functools import reduce

def multiply(*args):
    return reduce(mul, args)

&gt;&gt;&gt; multiply(3, 5, 1, 5)
75
</code></pre>

<p>Using the <code>*</code>, the variable that we associate with the <code>*</code> becomes an iterable meaning you can do things like iterate over it, run some higher order functions such as <code>map</code> and <code>filter</code>, etc.</p>

<p>One last thing, you can also use the <code>*</code> syntax to break up an iterable into it’s individual elements. Here’s an example:</p>

<pre><code>def print_three(a, b, c):
    print(a, b, c)

&gt;&gt;&gt; r = [1, 2, 3]
&gt;&gt;&gt; print_three(*r)   # notice that the list gets broken up into three arguments
1 2 3
</code></pre>

<p>So, what does the <code>**</code> stand for then? For starters, by convention, we use the name <code>kwargs</code> with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them too!). A keyword argument is where you provide a name to the variable as you pass it into the function. Here’s an exmaple which should make it more clear:</p>

<pre><code>def print_table(**kwargs):
    for key, value in kwargs.items():
        print(key, value)

&gt;&gt;&gt; print_table(a = 5, b = 6, c = 7)
b 6
c 7
a 5
</code></pre>

<p>Whoa, what just happened? Notice the syntax, within <code>print_table(a = 5, b = 6, c = 7)</code>, <code>a = 5</code>, <code>b = 6</code>, and <code>c = 7</code> are all keyword arguments. You can think of the <code>kwargs</code> as being a dictionary that maps each keyword to the value that you pass alongside it. That is why when we iterate over the <code>kwargs</code> there doesn’t seem to be any order in which they were printed out.</p>

<p>I hope that this short article helped clarify what <code>*args</code> and <code>**kwargs</code> can be used for! Leave any questions or comments in the section below!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Merge Sort]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/merge_sort"/>
        <updated>2013-03-11T00:00:00-07:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/merge_sort</id>
        <content type="html"><![CDATA[
<p>We want to define a function <code>merge_sort</code> that produces a new, sorted list. The algorithm goes as follows: we will take in a list and then split it into two sublists, left and right. We will then recursively call <code>merge_sort</code> on each of the lists so that they are sorted. Once they are sorted, we will iterate through both of the sublists, both sorted, and reconstruct a single sorted list that we will return. You want to define two functions, <code>merge_sort</code> and <code>merge</code>. Merge sort is the outer function that splits the lists and thenrecursively calls itself. Merge is the function that takes in two sorted lists and returns a single sorted list.</p>

<pre><code>def merge_sort(lst):
    """
    Takes in a list and returns the sorted version of it.

    &gt;&gt;&gt; p = [1, 34, 2, 5, 3]
    &gt;&gt;&gt; merge_sort(p)
    [1, 2, 3, 5, 34]
    """
    "***YOUR CODE HERE***"

def merge(l1, l2):
    """
    Takes in two sorted lists and returns a single sorted
    list by merging the elements of both lists together.

    &gt;&gt;&gt; r = [1, 3, 5, 6]
    &gt;&gt;&gt; l = [1, 2, 4, 5]
    &gt;&gt;&gt; merge(l, r)
    [1, 1, 2, 3, 4, 5, 5, 6]
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def merge_sort(lst):
    """
    Takes in a list and returns the sorted version of it.

    &gt;&gt;&gt; p = [1, 34, 2, 5, 3]
    &gt;&gt;&gt; merge_sort(p)
    [1, 2, 3, 5, 34]
    """
    "***YOUR CODE HERE***"
    if len(lst) &lt;= 1:
        return lst
    mid = len(lst) // 2
    left = merge_sort(lst[:mid])
    right = merge_sort(lst[mid:])
    return merge(left, right)

def merge(l1, l2):
    """
    Takes in two sorted lists and returns a single sorted
    list by merging the elements of both lists together.

    &gt;&gt;&gt; r = [1, 3, 5, 6]
    &gt;&gt;&gt; l = [1, 2, 4, 5]
    &gt;&gt;&gt; merge(l, r)
    [1, 1, 2, 3, 4, 5, 5, 6]
    """
    "***YOUR CODE HERE***"
    if len(l1) == 0:
        return l2
    if len(l2) == 0:
        return l1
    if l1[0] &lt; l2[0]:
        return [l1[0]] + merge(l1[1:], l2)
    return [l2[0]] + merge(l1, l2[1:])
</code></pre>

  <p>In <code>merge_sort</code> we just follow the description of the problem and add in our base case. If we have list that has only one item or zero items, it is already sorted. Then, we split up our elements into a sorted left list and sorted right list and call the merge function on them.</p>

  <p>The <code>merge</code> function is farily simple. If <code>l1</code> is empty, then merging <code>l2</code> with an empty list is just <code>l2</code>. The same applies to <code>l2</code> being empty. Then, we just need to figure out which element is less, and take that element, place it in front, then recurse on the same two list except one is now one item shorter. The result is a single sorted list!</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Filter Rlist]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/filter_rlist"/>
        <updated>2013-03-10T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/filter_rlist</id>
        <content type="html"><![CDATA[
<p>We want to define a function <code>filter_rlist</code> that takes in a function and an rlist and returns a new rlist that keeps all the items that satisfy the given input function. For this, we will be using the functional representation of our rlists using tuples and we will have the following constructors and selectors to use:</p>

<pre><code>empty_rlist = None

def rlist(first, rest):
    return (first, rest)

def first(r):
    return r[0]

def rest(r):
    return r[1]
</code></pre>

<pre><code>def filter_rlist(fn, r):
    """
    Takes in a function, fn, and an rlist, r.
    Returns a new rlist that keeps all the elements
    that satisfy the given function.

    &gt;&gt;&gt; r = rlist(1, rlist(4, rlist(5, rlist(3, rlist(9, empty_rlist)))))
    &gt;&gt;&gt; filter_rlist(lambda x: x % 2 == 0, r)
    (4, None)
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def filter_rlist(fn, r):
    """
    Takes in a function, fn, and an rlist, r.
    Returns a new rlist that keeps all the elements
    that satisfy the given function.

    &gt;&gt;&gt; r = rlist(1, rlist(4, rlist(5, rlist(3, rlist(9, empty_rlist)))))
    &gt;&gt;&gt; filter_rlist(lambda x: x % 2 == 0, r)
    (4, None)
    """
    if r == empty_rlist:
        return r
    if fn(first(r)):
        return rlist(first(r), filter_rlist(fn, rest(r)))
    return filter_rlist(fn, rest(r))
</code></pre>

  <p>Basically, we want to check to see if the first element of our rlist satisfies the input function. If it does, then we need construct a new rlist, keeping the first element, and recursively applying the filter on the rest. If it does not satisfy the function, then we can just recurse on the rest and that will disregard the current element. Finally, our base case is when we have the <code>empty_rlist</code>. When we have an <code>empty_rlist</code>, we don’t have to filter anything else out because we’ve already filtered everything!</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Designing Classes and Using Inheritance]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/designing_classes_and_using_inheritance"/>
        <updated>2013-03-09T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/designing_classes_and_using_inheritance</id>
        <content type="html"><![CDATA[
<p>Say we wanted to design some classes that represent Cars, Trucks, and Buses. Each one has a variable, let’s call it <code>repair_cost</code> that represents the amount of money required to repair that object. Each class has a different <code>repair_cost</code>, but each object in the class has the same <code>repair_cost</code>. So, each Car object has a <code>repair_cost</code> of 10, Trucks cost 20, and Buses cost 30.</p>

<pre><code>&gt;&gt;&gt; c1 = Car()
&gt;&gt;&gt; t1 = Truck()
&gt;&gt;&gt; b1 = Bus()
&gt;&gt;&gt; c1.repair_cost
10
&gt;&gt;&gt; t1.repair_cost
20
&gt;&gt;&gt; b1.repair_cost
30
</code></pre>

<p>How many classes should we make to minimize the amount of code?</p>

<p>After we have determined the number of classes to make, let’s make them! Implement the Car, Truck, Bus, and any other classes (which could be none!) that you feel are necessary to create this situation in a way that makes the most sense (making use of inheritance, overridding, etc.). Let’s also set a variable on all the vehicles that states how many wheels it has (let’s just say that all of our vehicles have 4 wheels).</p>

<p>Once you have your classes made, implement a function that takes in an <code>amount_paid</code> and compares that to the <code>repair_cost</code>. If the <code>amount_paid</code> is greater than or equal to the <code>repair_cost</code>, then the item is allowed to be fixed and it should print out a message indicating that it has been fixed. If it cannot be fixed, then it should print out a different message indicating so. Try to minimize the amount of code that is required for this problem using inheritance.</p>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <p>There are many ways to answer this question. Here is the solution that I came up with.</p>

  <pre><code>class Vehicle(object):
    num_wheels = 4

    def repair(self, amount_paid):
        if amount_paid &gt;= self.repair_cost:
            print("The " + type(self).__name__ + " has been fixed!")
        else:
            print("The " + type(self).__name__ + " was not fixed :( Please pay more money.")

class Car(Vehicle):
    repair_cost = 10

class Truck(Vehicle):
    repair_cost = 20

class Bus(Vehicle):
    repair_cost = 30
</code></pre>

  <p>The <code>type(self).__name__</code> is something that is not important, all it does is grab the name of the class of self and convert it to string form. </p>

  <p>The important parts here are the fact that we <strong>do not</strong> have any <code>__init__</code> statements, anywhere! The reason is because our objects themselves do not have any instance variables, they only have class variables. So, we simply make a generic object (becuase the class Vehicle inherites from the generic object class) that allows us to assign some class variables.</p>

  <p>For the subclasses, Car, Truck, and Bus, we only need to set the <code>repair_cost</code> because that is the only thing that changes between the different classes. The <code>repair</code> method that we definied in the Vehicle class still works. Do you see why?</p>

  <p>The answer lies in the fact that the <code>repair</code> method checks <code>self.repair_cost</code> instead of <code>Vehicle.repair_cost</code> or <code>Car.repair_cost</code>. The result is that whichever object this method is called on, it will use the type of the <em>object</em> to determine which <code>repair_cost</code> to use. The result is that we can now make one general method that works for multiple different subclasses.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[In-Place Functions]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/in_place_functions"/>
        <updated>2013-03-08T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/in_place_functions</id>
        <content type="html"><![CDATA[
<p>This weeks homework had a lot of problems where we wanted you to solve them in-place (meaning without creating a new list). Instead, we wanted you to swap the items in the list and directly modify the input list. Here are a few more practice problems to make sure that you understand how in-place functions work. Write two functions (unrelated to one another) called <code>map_in_place</code> and <code>sort_in_place</code> that each take in a list. <code>map_in_place</code> will modify the original list by mapping the input function over each of the elements of the list. <code>sort_in_place</code> can use any sorting algorithm you want and will modify the original list so that it is sorted after calling this function on it. </p>

<pre><code>def map_in_place(fn, lst):
    """
    Takes in a function, fn, and maps it over
    each item of the input list, lst.
    Returns None and instead modifies the input list.

    &gt;&gt;&gt; r = [3, 2, 4, 5, 6]
    &gt;&gt;&gt; map_in_place(lambda x: x*x, r)
    &gt;&gt;&gt; r
    [9, 4, 16, 25, 36]
    """
    "***YOUR CODE HERE***"

def sort_in_place(lst):
    """
    Takes in a list and sorts it in-place,
    just like the builtin .sort() method does.

    &gt;&gt;&gt; r = [1, 5, 4, 6, 3, 12]
    &gt;&gt;&gt; sort_in_place(r)
    &gt;&gt;&gt; r
    [1, 3, 4, 5, 6, 12]
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def map_in_place(fn, lst):
    """
    Takes in a function, fn, and maps it over
    each item of the input list, lst.
    Returns None and instead modifies the input list.

    &gt;&gt;&gt; r = [3, 2, 4, 5, 6]
    &gt;&gt;&gt; map_in_place(lambda x: x*x, r)
    &gt;&gt;&gt; r
    [9, 4, 16, 25, 36]
    """
    for i in range(len(lst)):
        lst[i] = fn(lst[i])

def sort_in_place(lst):
    """
    Takes in a list and sorts it in-place,
    just like the builtin .sort() method does.

    &gt;&gt;&gt; r = [1, 5, 4, 6, 3, 12]
    &gt;&gt;&gt; sort_in_place(r)
    &gt;&gt;&gt; r
    [1, 3, 4, 5, 6, 12]
    """
    for i in range(len(lst)):
        index_of_min = lst.index(min(lst[i:]))
        lst[i], lst[index_of_min] = lst[index_of_min], lst[i]
</code></pre>

  <p>For each of these, the important note is that we are iterating over the elements of the lists using the index values to directly mutate the list. If we were to do a for loop such as <code>for i in lst</code> then the value of <code>i</code> would change at each iteration but that is separate from the <code>lst</code> itself. The result is that you would not be mutating the list.</p>

  <p>For the <code>sort_in_place</code> function, our general algorithm is to find the minimum of the rest of the list and set that to be the next item. The first time, we are finding the minimum of the whole list and setting that as our first item. Then the next time, we are finding the minimum of the rest of the list and setting that as our next item and so on and so forth. Let me know if the comments below if this method is confusing for you!</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Rlists]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/notes/rlists"/>
        <updated>2013-03-05T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/notes/rlists</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#data-abstraction">Data Abstraction</a></li>
  <li><a href="#constructors-and-selectors">Constructors and Selectors</a></li>
</ul>

<h4 id="introduction">Introduction</h4>

<p>What exactly are rlists? rlists are a CS61A abstraction that defines a series of pairs that connect together by accessing the <code>first</code> and <code>rest</code> elements of the pair. We have defined the following constructs for our rlist abstraction:</p>

<pre><code>empty_rlist = None

def rlist(first, rest):
    return (first, rest)

def first(r):
    return r[0]

def rest(r):
    return r[1]
</code></pre>

<p>What does this mean for us? This means that for any rlist, we only have access to the first element of the list and a way to get the rest of the items (which is also an rlist). The idea is simple, but we can do powerful things with rlists.</p>

<h4 id="data-abstraction">Data Abstraction</h4>

<p>This rlist abstraction is considered an abstraction in the first place because we can change how rlists are stored and accessed. For example, we can define our class as follows and the code that we write (assuming we don’t break any abstraction barriers ourselves) would still work.</p>

<pre><code>empty_rlist = lambda x: None

def rlist(first, rest):
    return lambda x: (first, rest)

def first(r):
    return r(None)[0]

def rest(r):
    return r(None)[1]

def show(r):
    if r == empty_rlist:
        return None
    return (first(r), show(rest(r)))
</code></pre>

<p>Notice how we had to add a new function, <code>show</code> that takes in an rlist and actually gives us readable output. Otherwise, we would be staring at <code>&amp;lt;function rlist.&amp;lt;locals&amp;gt;.&amp;lt;lambda&amp;gt; at 0x1006f07a0&amp;gt;</code> all day because our new abstraction returns functions.</p>

<p>Okay, abstractions aside, let’s figure out how to tackle these rlist problems!</p>

<h4 id="constructors-and-selectors">Constructors and Selectors</h4>

<p><strong>Always, always, always</strong> remember that we only have access to two things in our rlist, the <code>first</code> element, and the rlist that consists of the <code>rest</code> of the elements. Generally, you won’t usually see many nested calls (for example: <code>first(rest(rest()))</code>) because we usually let recursion take care of the actual traversing part.</p>

<p>Let’s walk through an example. Say we wanted to write a function, <code>less_rlist</code> that keeps all elements in the rlist that are less than the given input, <code>n</code>. How would we approach this problem?</p>

<pre><code>def less_rlist(r, n):
    """
    Takes in an rlist, r, and a number n.
    Returns a new rlist with all the elements from the original
    rlist that are less than n.

    &gt;&gt;&gt; r = rlist(1, rlist(2, rlist(5, rlist(3, empty_rlist))))
    &gt;&gt;&gt; less_rlist(r, 3)
    (1, (2, None))
    """
</code></pre>

<p>I recommend starting with the base case. Once we figure that out, we know when to stop, and we can focus on getting our input down to that level. For this question, and for most rlists in general, we want to think about our smallest input. For an rlist, that smallest input is the <code>empty_rlist</code>. When we input the <code>empty_rlist</code>, we expect to get back the <code>empty_rlist</code> because all the elements (none in this case) are less than n. So we can now write one of our base cases.</p>

<pre><code>def less_rlist(r, n):
    if r == empty_rlist:
        return r
</code></pre>

<p>Now we need to determine if there are any more base cases. For this question, we also have to consider the case when the item that we are currently on is less than the number n. What do we need to do when this is true? We need to just continue recursing on the rest of the list while keeping this element in our new rlist. What do we need to do when it’s false? We need to also recurse on the rest of our rlist, BUT, we don’t need to keep the current item and we can just keep going. Let’s write the if case.</p>

<pre><code>def less_rlist(r, n):
    if r == empty_rlist:
        return r
    if first(r) &lt; n:
        return rlist(first(r), less_rlist(rest(r), n))
</code></pre>

<p>The only single element that we can check is the one that we are currently on. The way we access this element is by calling the function, <code>first</code> on our rlist. Like we said above, when this is true, we need to construct an rlist with the first element being in our new rlist and the rest of the rlist is just the result of calling the same function on the rest. By calling the function on the rest of our rlist, we are making our way to the base case. Let’s finish up the function. What do we do in the recursive case? We just call the same function on our rest and we forget about the current element because it does not satisfy the condition of being less than n. Let’s write it.</p>

<pre><code>def less_rlist(r, n):
    if r == empty_rlist:
        return r
    if first(r) &lt; n:
        return rlist(first(r), less_rlist(rest(r), n))
    return less_rlist(rest(r), n)
</code></pre>

<p>That wasn’t so bad was it? Try some of the extra recursive rlist questions below!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Dictionaries]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notes" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/notes/dictionaries"/>
        <updated>2013-03-05T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/notes/dictionaries</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#accessing-elements">Accessing Elements</a></li>
  <li><a href="#inserting-and-changing-elements">Inserting and Changing Elements</a></li>
  <li><a href="#removing-elements">Removing Elements</a></li>
  <li><a href="#iterating-over-the-elements-in-a-dictionary">Iterating Over the Elements in a Dictionary</a></li>
  <li><a href="#dictionaries-in-environment-diagrams">Dictionaries in Environment Diagrams</a></li>
  <li><a href="#useful-methods-for-dictionaries">Useful Methods for Dictionaries</a></li>
</ul>

<h4 id="introduction">Introduction</h4>

<p>Dictionaries are another type of <em>data structure</em> that we can use to hold and store information. Dictionaries are built around the idea of storing key-value pairs and they offer a quick solution to look up one piece of information to access another. A key can be any type except a mutable data type. A value has no such restrictions (meaning its type is not restricted). A common key type is the string because in English, we often associate mapping a word or phrase to some longer or extended information.</p>

<p>A dictionary can only have one value for each individual key. If you try to insert a pair with an existing key, the value will be overridden. This can be shown by a quick example. Say I had a dictionary that mapped names of people to their ages:</p>

<pre><code>&gt;&gt;&gt; ages = {'joe': 20, 'jenny': 19, 'tony': 24}
&gt;&gt;&gt; ages['tony'] = 23
</code></pre>

<p>If I try to add another person named <code>tony</code>, instead of having two keys, both labeled <code>tony</code>, I will instead have one key for <code>tony</code> mapped to the new value.</p>

<pre><code>&gt;&gt;&gt; ages
{'joe': 20, 'jenny': 19, 'tony': 23}
</code></pre>

<p>This shows that dictionary keys are unique. Another thing we should note is that dictionaries are unordered. Python has its own way of organizing and arranging the items, but we as the programmer do not know for sure.</p>

<h4 id="accessing-elements">Accessing Elements</h4>

<p>Elements in a dictionary can be accessed using the square bracket notation. If the key exists, it will return its value. If not, it will throw a <code>KeyError</code>.</p>

<pre><code>&gt;&gt;&gt; ages['joe']
20
&gt;&gt;&gt; ages['johnny']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'johnny'
</code></pre>

<h4 id="inserting-and-changing-elements">Inserting and Changing Elements</h4>

<p>Elements in a dictionary can be inserted in the same way that they are changed. Dictionaries are considered a mutable data type because we can change the entries and add new ones. To add elements, we do the following:</p>

<pre><code>&gt;&gt;&gt; ages['harry'] = 19
&gt;&gt;&gt; ages
{'joe': 20, 'harry': 19, 'jenny': 19, 'tony': 23}
</code></pre>

<p>To change elements, we do the same thing, except we know that the key already exists.</p>

<pre><code>&gt;&gt;&gt; ages['jenny'] = 25
&gt;&gt;&gt; ages
{'joe': 20, 'jenny': 25, 'harry': 19, 'tony': 23}
</code></pre>

<p>Again, notice that the elements are in a different order this time, a reminder that dictionaries are unordered and that we cannot rely upon the order when we iterate over them.</p>

<h4 id="removing-elements">Removing Elements</h4>

<p>If you desire to remove items from a dictionary, you must use the special built-in, <code>del</code>. The syntax is as follows:</p>

<pre><code>&gt;&gt;&gt; del ages['tony']
&gt;&gt;&gt; ages
{'joe': 20, 'jenny': 25, 'harry': 19}  
</code></pre>

<p>We use the <code>del</code> function that requires you to specify the dictionary and the associated key that you want to remove.</p>

<h4 id="iterating-over-the-elements-in-a-dictionary">Iterating Over the Elements in a Dictionary</h4>

<p>We have several methods for iterating over a dictionary. Again, we remind ourselves that dictionaries are unordered so we cannot rely upon a for loop to give us the same values after we manipulate the data. For example:</p>

<pre><code>&gt;&gt;&gt; for i in ages:
...     print(i)
...
harry
joe
jenny
</code></pre>

<p>Notice that the <em>keys</em> are what gets printed and that the values are nowhere to be found. Iterating over the dictionary itself is the same as iterating over just the keys. To be more specific, we can use the <code>.keys()</code> method to iterate over just the keys. We also have access to the <code>.values()</code> method and the <code>.items()</code> method and they work as follows:</p>

<pre><code>&gt;&gt;&gt; for i in ages.values():
...     print(i)
...
19
20
25
&gt;&gt;&gt; for k, v in ages.items():
...     print(k, v)
...
harry 19
joe 20
jenny 25
</code></pre>

<h4 id="dictionaries-in-environment-diagrams">Dictionaries in Environment Diagrams</h4>

<p>Dictionaries have a representation in environment diagrams too. We represent it by listing the type <em>dict</em> above the boxes with the keys on the left and the values on the right. The name of our dictionary, <code>ages</code>, points to the dict object. Here is what our <code>ages</code> dictionary would look like:</p>

<p><img src="/public/images/dictionaries/environment_diagram_01.png" alt="Environment Diagram" /></p>

<p>When we add and remove items from the dictionary, our environment diagram updates to this:</p>

<pre><code>&gt;&gt;&gt; ages['joe'] = 22
&gt;&gt;&gt; del ages['jenny']
&gt;&gt;&gt; ages
{'joe': 22, 'harry': 19}
</code></pre>

<p><img src="/public/images/dictionaries/environment_diagram_02.png&quot;&gt;" alt="Environment Diagram" /></p>

<h4 id="useful-methods-for-dictionaries">Useful Methods for Dictionaries</h4>

<p>Work in progress, will be updated soon.</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Better Fib]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/better_fib"/>
        <updated>2013-03-04T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/better_fib</id>
        <content type="html"><![CDATA[
<p>Remember <code>fib</code>, the function that we created a while ago to find the nth fibonacci number and to show tree recursion? The function was really slow on large inputs because at each level of recursion, it would make two recursive calls to itself AND it would recompute numbers that it already knew. For example, calling <code>fib(3)</code> computes <code>fib(2)</code> once and <code>fib(1)</code> twice. We don’t need to compute out <code>fib(1)</code> twice. Using a dictionary, your job is to re-write the function <code>fib</code> so that it only computes a certain recursive call once. (i.e. it only computes <code>fib(1)</code> once) Remember that a dictionary is able to store and look up items using a key-value system. If you want a hint, the idea that we are implementing is called <em>memoization</em>.</p>

<pre><code>def better_fib(n):
    """
    Takes in a number, n, and computes the nth fibonacci
    number recursively. To save time, it will only compute
    each value once and store it in a dictionary. We will
    define better_fib(0) = 0 and better_fib(1) = 1.
      
    &gt;&gt;&gt; better_fib(3)
    2
    &gt;&gt;&gt; better_fib(100)
    354224848179261915075   # this should take less than a second
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def better_fib(n):
    """
    Takes in a number, n, and computes the nth fibonacci
    number recursively. To save time, it will only compute
    each value once and store it in a dictionary. We will
    define better_fib(0) = 0 and better_fib(1) = 1.
      
    &gt;&gt;&gt; better_fib(3)
    2
    &gt;&gt;&gt; better_fib(100)
    354224848179261915075   # this should take less than a second
    """
    d = {}
    def fib_helper(n):
        if n in d:
            return d[n]
        if n &lt;= 1:
            d[n] = n
            return n
        d[n] = fib_help(n - 1) + fib_help(n - 2)
        return d[n]
    return fib_helper(n)
</code></pre>

  <p>There are several main ideas being tested in this problem. First, the overarching idea is <strong>memoization</strong>. We want to be able to quickly compute the nth fibonacci number and to do this, we will memoize, or remember, what the previous values that we computed were. To implement this, we will use a dictionary. Now, we could have passed the dictionary through our helper function, but then we would start having multiple copies of the dictionary floating around our function calls. To avoid that, we will be using the final main idea, a mutable data structure. In this problem, by creating the dictionary outside of the inner function, we only have to create one. That dictionary is is accessible by every single recursive call. That means that if we compute <code>fib(7)</code> in one recursive call, but we need it later when evaluating <code>fib(8)</code>, then we can evaluate it immidiately.</p>

  <p>The function first checks to see if the item is currently in the dictionary. If it is, it returns the value of it immidiately and goes onto the next recursive call. If not, it computes the number, then stores it directly into the dictionary for future access. This saves unnecessary computations that might occur later on.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Sort Rlist]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/sort_rlist"/>
        <updated>2013-02-26T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/sort_rlist</id>
        <content type="html"><![CDATA[
<p>Write a function that sorts an rlist. You might want to look up the <a href="http://en.wikipedia.org/wiki/Insertion_sort">Wikipedia article on Insertion Sort</a> although you are more than welcome to implement any kind of sort you want! Use the <code>first</code> and <code>rest</code> functions that we have defined for rlists and used in class. You may want to define a helper function…</p>

<pre><code>def sort_rlist(r):
    """
    Sort an rlist in ascending order.
    
    &gt;&gt;&gt; r = rlist(4, rlist(3, rlist(6, rlist(8, rlist(1, empty_rlist)))))
    &gt;&gt;&gt; sort_rlist(r)
    (1, (3, (4, (6, (8, None)))))
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def sort_rlist(r):
    """
    Sort an rlist in ascending order.
    
    &gt;&gt;&gt; r = rlist(3, rlist(5, rlist(1, rlist(9, rlist(7, None)))))
    &gt;&gt;&gt; sort_rlist(r)
    (1, (3, (5, (7, (9, None)))))
    """
    if r == empty_rlist:
        return r
    return insert(first(r), sort_rlist(rest(r)))

def insert(item, r):
    """
    Inserts item into r in sorted order.
    
    &gt;&gt;&gt; r = rlist(4, rlist(6, rlist(8, None)))
    &gt;&gt;&gt; insert(5, r)
    (4, (5, (6, (8, None))))
    """
    if r == empty_rlist:
        return rlist(item, empty_rlist)
    if item &lt;= first(r):
        return rlist(item, r)
    return rlist(first(r), insert(item, rest(r)))
</code></pre>

  <p>First off, I want to state that this problem was very challenging. If you didn’t get it, don’t fret!</p>

  <p>Let’s take a look at what this function is doing and how the <code>insert</code> function works. The <code>insert</code> function takes in an item and an rlist and inserts it as soon as it finds a number in the list that is bigger than it. This means that it assumes that everything before it is already sorted. For example, if our list was (1, (3, (6, (7, None)))) and we want to insert 4, it will first compare itself to 1, then 3, then 6. When it gets to 6, it realizes that it is less than that value and inserts itself just before the 6.</p>

  <p>Now let’s take a look at the actual <code>sort_rlist</code> function. This function will continue to sort the rest of the rlist until it is equal to the empty rlist. At each recursive call, it is inserting the first of the rlist (in the doctest above, it first tries to insert 3) into the correct position <em>of the already sorted rlist</em>. This is the most important fact here. The <code>sort_rlist</code> function does not return the rlist until it has completely finished sorting what it currently has. That means that at each iteration, we are inserting the current item into an already sorted list AND if we correctly insert the current item then the rlist remains sorted. The output if the final sorted rlist.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Map Rlist]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/map_rlist"/>
        <updated>2013-02-25T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/map_rlist</id>
        <content type="html"><![CDATA[
<p>Write a function that emulates the fucntionality of <code>map</code> but for our implementation of rlists. You may use the functions we have been working with: <code>first</code> and <code>rest</code>.</p>

<pre><code>def map_rlist(fn, r):
    """
    Takes in a function, fn, and applies it to all
    items in the input rlist, r.
    
    &gt;&gt;&gt; r = rlist(1, rlist(2, rlist(3, empty_rlist)))
    &gt;&gt;&gt; map_rlist(lambda x: x*x, r)
    (1, (4, (9, None)))
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def map_rlist(fn, r):
    """
    Takes in a function, fn, and applies it to all
    items in the input rlist, r.
    
    &gt;&gt;&gt; r = rlist(1, rlist(2, rlist(3, empty_rlist)))
    &gt;&gt;&gt; map_rlist(lambda x: x*x, r)
    (1, (4, (9, None)))
    """
    if r == empty_rlist
        return r
    return rlist(fn(first(r)), map_rlist(fn, rest(r)))
</code></pre>

  <p>We want to apply the function, fn, to each item of the rlist so we’re going to need to access eah element individually. To do this, we will use recursion to recursively map over the rest of the rlist. We will return the newly created rlist by using the constructor <code>rlist</code> which takes in a first and a rest. The first element will be the original first element with the function applied to it.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Longest Length of the Same Character in a String]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/longest_length_same_character"/>
        <updated>2013-02-19T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/longest_length_same_character</id>
        <content type="html"><![CDATA[
<p>Write a function that finds the length of the longest contiguous string of the same character and returns that length. Implement it recursively (you probably don’t want to do it iteratively but you’re free to try!) You may use the functions <code>first</code> and <code>rest</code> defined below.</p>

<h5 id="hint-1-you-might-want-to-use-a-helper-function">Hint #1: You might want to use a helper function…</h5>

<h5 id="hint-2-your-helper-function-might-want-to-include-the-following-information-maybe-more">Hint #2: Your helper function might want to include the following information (maybe more):</h5>

<pre><code>def helper(word, prev_char, curr_count, curr_max):
    "***YOUR CODE HERE***"
</code></pre>

<p>Make sure that your function works on all inputs, including the empty string! Here are the functions <code>first</code> and <code>rest</code> that we have been working with in class.</p>

<pre><code>def first(word):
    return word[0]
    
def rest(word):
    return word[1:]
</code></pre>

<pre><code>def find_longest_run(word):
    """
    Finds the length of the longest contiguous string
    of a single character and returns the length.

    &gt;&gt;&gt; find_longest_run("hello")
    2
    &gt;&gt;&gt; find_longest_run("helloooo")
    4
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def helper(word, prev_char, curr_count, curr_max):
    if len(word) == 0:
        return curr_max
    elif first(word) == prev_char:
        return helper(rest(word), first(word), curr_count + 1, max(curr_count + 1, curr_max))
    return helper(rest(word), first(word), 1, curr_max)

def find_longest_run(word):
    """
    Finds the length of the longest contiguous string
    of a single character and returns the length.
    
    &gt;&gt;&gt; find_longest_run("hello")
    2
    &gt;&gt;&gt; find_longest_run("helloooo")
    4
    """
    return helper(word, "", 0, 0)
</code></pre>

  <p>We need to keep track of some information between each recursive call so to make our lives easier, we will implement a helper function that takes in 4 arguments. We will analyze the rest of the word, we will need to compare against the previous character, and we will need to keep track of how long our current run is as well as our current longest run. Once we have that, we can figure out what our base case(s) are. For one, if the word that we are checking doesn’t have any letters left, then there can’t be any characters left to check so we return the <code>curr_max</code> (longest length) that we have found so far. Then, we have two different situations, whether or not the previous character was eqaul to our current character. If it is, then we just add 1 to our <code>curr_count</code> and then compare to see if that new <code>curr_count</code> is greater than our <code>curr_max</code>. If it is, we take the new value. In our other recursive call, we just recurse on the input, but we also set our <code>curr_count</code> to 1 because the characters were not the same so the streak starts over.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Sum Digits]]></title>
        
        <category term="cs61a" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="sp13" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="problems" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//cs61a/sp13/problems/sum_digits"/>
        <updated>2013-02-18T00:00:00-08:00</updated>
        <id>markmiyashita.com:/cs61a/sp13/problems/sum_digits</id>
        <content type="html"><![CDATA[
<p>Write a function that sums up the digits of a number. Try to implement it both iteratively and recursively.</p>

<pre><code>def sum_digits(n):
    """
    Takes a number n as input and outputs the 
    sum of the digits of n.
    
    &gt;&gt;&gt; sum_digits(100)
    1
    &gt;&gt;&gt; sum_digits(235)
    10
    """
    "***YOUR CODE HERE***"
</code></pre>

<p><a href="#solution" class="solution_toggle">Toggle Solution</a></p>

<div class="solution">

  <pre><code>def sum_digits(n):
    """
    Takes a number n as input and outputs the 
    sum of the digits of n.
    
    &gt;&gt;&gt; sum_digits(100)
    1
    &gt;&gt;&gt; sum_digits(235)
    10
    """
    if n &lt; 10:
        return n
    return n % 10 + sum_digits(n // 10)
</code></pre>

  <p>When we are given a number, n, that is less than 10, we know that the number has only one digit so we can just return that number. When it is greater than or equal to ten, we want to mod it by 10 to get the ones place, and then remove the ones place and use recursion to find the sum of the rest of the digits. The floordiv operator allows us to remove the ones place from the number by floordiving by 10.</p>

</div>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[How to Win a Hackathon]]></title>
        
        <category term="blog" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//blog/how-to-win-a-hackathon"/>
        <updated>2012-11-22T12:04:00-08:00</updated>
        <id>markmiyashita.com:/blog/how-to-win-a-hackathon</id>
        <content type="html"><![CDATA[<p><img src="/public/images/hackathon.jpg" class="img-border" /></p>

<p>This year I started participating in many hackathons of different lengths, different atmospheres, and different types of applications that won. I am still quite new to the hackathon scene, but I thought I’d share my thoughts on how most winners, won.</p>

<ul>
  <li>Unless you’re a full-stack developer with really, really good frontend skills, you need a designer. The presentation is arguably the most important part and if your product is not visually pleasing, it will be hard to overcome.</li>
  <li>The demo is the most important part. No matter how great your project is, if you can’t show it properly, or you can’t explain the technical aspects of it, you won’t be able to show off your project in a way that will attract the developers.</li>
  <li>Work on something that you are passionate about. Passion helps you work faster and with less distractions, trust me.</li>
  <li>Make an application that does one thing and make sure it does that one thing very, very well. Most projects that win have one purpose. The reason that they are able to win is because their project is complete and it has a direct purpose. Projects that are too ambitious almost always come up short because of missing features.</li>
</ul>

<p>These are just some of the things that I’ve noticed at various hackathons that I have participated in. Have any additional tips? Leave them in the comments below!</p>

<p>Wow! My article was featured on the front page of Hacker News for almost half a day! You can check out the discussion <a href="http://news.ycombinator.com/item?id=4830418">here!</a> Thanks for all the support everyone!</p>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Setting Up Our First App]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/setting_up_our_first_app"/>
        <updated>0000-01-03T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/setting_up_our_first_app</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">3.1</a></li>
</ul>

<h3 id="section">3.1</h3>
]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Models, Views, and Controllers]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/models_views_and_controllers"/>
        <updated>0000-01-02T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/models_views_and_controllers</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mvc---an-idea">2.1 MVC - An Idea</a>    <ul>
      <li><a href="#models">2.1.1 Models</a></li>
      <li><a href="#views">2.1.2 Views</a></li>
      <li><a href="#controllers">2.1.3 Controllers</a></li>
    </ul>
  </li>
</ul>

<h3 id="mvc---an-idea">2.1 MVC - An Idea</h3>

<p>What is MVC? MVC stands for Model, View, Controller, and it’s the idea that we
want to separate our code into sections that represent different parts of our
application. Popular web applications separate into three main components.
First off, we have our models which represent the brains within our application.</p>

<p>Models are like objects in which they have attributes and methods that work to
edit and recall data stored within the object. Between objects, there can be
correspondances between them such as one-to-one, many-to-one, or, many-to-many
relationships. These can be thought up of as relationships between actual
objects such as a <code>parent</code> having many <code>children</code>.</p>

<p>Views are what show the data to the users of your web application. Once you find
a user and get all of the attributes, you show it to the user using the view.
Views are generally templated using a markup of some sort. We’ll learn all about
this later on.</p>

<p>Controllers are the link between the two. Requests come in and they are
processed by figuring out which method is called in the controller. The
controller then links together and gets whatever data it needs processed from
the model where it is finally gathered and redisplayed in the view for the user
to interact with again.</p>

<h4 id="models">2.1.1 Models</h4>

<h4 id="views">2.1.2 Views</h4>

<h4 id="controllers">2.1.3 Controllers</h4>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
    <entry>
        <title><![CDATA[Introduction and Purpose]]></title>
        
        <category term="web_dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="rails" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://markmiyashita.com//web_dev/rails/introduction_and_purpose"/>
        <updated>0000-01-01T00:00:00-08:00</updated>
        <id>markmiyashita.com:/web_dev/rails/introduction_and_purpose</id>
        <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">1.1 Introduction</a>    <ul>
      <li><a href="#section">1.1.1</a></li>
      <li><a href="#section-1">1.1.2</a></li>
    </ul>
  </li>
  <li><a href="#section-2">1.2</a></li>
</ul>

<h3 id="introduction">1.1 Introduction</h3>

<h4 id="section">1.1.1</h4>

<h4 id="section-1">1.1.2</h4>

<h3 id="section-2">1.2</h3>

]]></content>
        <author>
            <name>Mark Miyashita</name>
            <url>http://markmiyashita.com</url>
        </author>
    </entry>
    
</feed>